var tipuesearch = {"pages":[{"title":"About","text":"このブログは私が以下の目的のために開設、運用しているものです。 考えていること、感じたことなどのアウトプットの練習 技術的知見の習得 「何でもいいから文章を書く」ことと「サイト運用の技術的知見」を目標としており、すなわち記事は「質より量」で生産することを前提としています。 本ブログの記事に書いてある内容は私の想像や空想、あるいは妄想を多分に孕んでいる可能性があり、情報源として参照・引用されることはお控えください。 また記事の内容に不正確な内容があっても、一切の責任を負いません。 ただし、 「間違った内容を拡散すること」が目的ではない ので、もし明らかに誤りがあるようでしたら以下にご連絡ください。 確認し、訂正や削除の必要があれば真摯に対応いたします。 メールアドレス: admin@mail.watarinohibi.tokyo その他の補足事項 このブログはそもそも他人に見てもらうために公開しているものでもありません。 あくまで私一人が、インターネットの片隅に落書きをするためだけに設置しているものです。 私のTwitterアカウントへはリンクがありますが、Twitterアカウントからこのブログへのリンクもありません。 ただし、興味本位で GoogleAnalytics での閲覧者データの収集は行われています。 このデータは目的なく収集され、また利用されることもありません。ただアクセスがあったことをたまに見て知るためだけに設置されており、何かの偶然でこのサイトへ訪れた人の情報は何にも生かされません。 GoogleAnalyticsが設置されており、サイト訪問者のデータが収集されていること を明記しておきます。 自己紹介 Profile Name: s.hosoya Birth: 1988/09/17 IT系インフラエンジニアとして新卒入社して6年目。転職を考えている。 Interest in the technical field サーバインフラの構築、運用、管理 クラウド/自動化/IaC SRE 監視（アプリケーション/インフラ/セキュリティ） セキュリティ 競技プログラミング いまはわりかし古い体制でのオンプレサーバの管理・運用がメイン。 本当はクラウドで IaC で k8s で SRE 的なことをもっとしたい Favorite 音楽（楽器演奏、バンド） ゲーム 読書 旅行、自然の風景 python, 競技プログラミング resume (under development) https://mollinaca.github.io/","tags":"pages","url":"pages/about.html","loc":"pages/about.html"},{"title":"雑記 20200519","text":"本日は妻の定期産科検診。 1日有給にして午前から病院へ行き、帰りに久々に（ほんと久々！）営業再開したカレー屋さんでランチして帰宅。 警戒しつつではあるものの、徐々に営業再開してるお店も増えてきてて、なにより。 久々に食べたカレー+ナン、ほんとおいしかった。 お腹の子どもはおかげさまで順調。 現在6ヶ月目に突入し、妊娠期間も折り返し。なんかあっという間だ。 2月、3月らへんはほんとつわりがしんどくてベッドから起き上がることもできず、自分もまだ出社してたので、朝起きて妻の食事とおやつ用意して、家事全般やりつつ出社。 19時ぴったりにあがってお買い物（食べられそうなもの探してスーパー3軒ぐらいはしごしたり！）しつつ、帰宅してからごはんの準備＆自分のごはん＆家事。 そこまでやってから競プロの練習ちょいちょいやってちょっとだけゲームして、って感じの繰り返しだった。今考えると、よくがんばってたなぁ。 今は大分落ち着いてきたので、家事は普通にやりつつ食事の支度はしてもらったり。 WFHのおかげで自分も家にいるので、分担しつついいカンジにやれてると思う。 妻は6月から職場復帰予定（8月から産休予定）だけど、自分はおそらく6月以降もWFHが継続しそうなので、そうなったらしばらく家に一人になるかも。家事はまたやっておこう。 お腹の子の性別も概ね判明し、経過も順調で一安心。 両親学級がまったく開催されないのが心残りだけどもうこれはしゃーない。YouTubeで見れるの見ておこうという感じ。 ありがたいことにこういうコンテンツも無償で紹介してくれてる方もいるので、勉強がてら見てる。 5/18のグラフ 検査実施件数: 1,433 件 検査実施人数（陰性確認を除く）と陽性率の推移: 2.2 % 補足されている情報の限りでは、検査数は横這い（やや減少？）なものの、新規陽性数はどんどん減っていっている。 大規模な感染の増加が広がらなかったことが功を奏していると言えそう。 終息はまだまだ先だけど、第一波は乗り越えつつある雰囲気なのかなと思う。","tags":"miscellaneous notes","url":"posts/2020/05/19/miscellaneous_notes_20200519","loc":"posts/2020/05/19/miscellaneous_notes_20200519"},{"title":"AtCoder Beginner Contest 168","text":"今日は無事(?)3完。 Dはチャレンジしたけどまだ勝てないやつだった、無念ナリ。 A - ∴ (Therefore) 入力された数字の1桁目の値による条件分岐。 1桁目の値をとるやり方はいくつかあると思うけど、今回はパッと思いついた文字列スライスの末尾から取得した。 桁和とかだったら10の余剰とかいろいろあるけど、今回はこれで十分。 提出 abc168_a . py s = input () n = int ( s [ - 1 ]) if n == 0 or n == 1 or n == 6 or n == 8 : print ( \"pon\" ) elif n == 3 : print ( \"bon\" ) else : print ( \"hon\" ) B - ... (Triple Dots) KとSの長さを比較して、Kのほうが長ければSをそのまま、Sのほうが長ければK分だけ出力して末尾に ... を足す、という処理。 これもそのまんま。 提出 abc168_b . py k = int ( input ()) s = input () if len ( s ) <= k : print ( s ) else : print ( s [ 0 : k ] + '...' ) 難易度的にはAと変わらんような。 C - : (Colon) 時計の針から三角形を作って、長辺の長さを計算するというもの。 文字だけだとちょっと理解が難しいけど、例題の説明が丁寧なのでスっと理解できた。 プログラミングもアルゴリズムもいらなくて、余弦定理を知ってるかどうか。自分は忘れてたのでググったけど、現役高校生で覚えてなければ大抵の人がググったんじゃないかな。 ポイントとして、時を示す短針はhの値と同時に、mの値分も移動しているというところ。 この、時計の長針と短針から角度を出す問題、前にもどっかで見た覚えがある。。。 提出 abc168_c . py a , b , h , m = map ( int , input () . split ()) # 2辺の角度 ## 長針は60分かけて360度を回る l_rad = 360 * ( m / 60 ) ## 短針は12時間かけて360度を回る+60分かけて360*(1/12)進む s_rad = 360 * ( h / 12 ) + 30 * ( m / 60 ) ## 角度は x = abs ( s_rad - l_rad ) if x > 180 : x = 360 - x import math print ( math . sqrt (( a ** 2 ) + ( b ** 2 ) - ( 2 * a * b * math . cos ( math . radians ( x ))))) 余弦定理を使って長辺の長さを求める部分を python での実装に落とすと上記のようになる。 角度を求めるときは、二つの角度の差の絶対値を求めて、それが180より大きければ（180より大きい側に三角形はできないので）、360から引くという処理をした。 なんかもっとスマートに書けるかも？ 本日はここまで30分ほどで1発ACでこれたので必達目標は達成。というわけでDに挑戦。 D - .. (Double Dots) 残念ながら、題意を正確に読み取れず。 重みなし無向グラフで、最短経路を求める問題だと思うんだけど、「道しるべ」の解釈がよくわからなかった。。 終わったあとのTL眺めてたら、これBFSで解いてたらしい。BFSなのはいいんだけど、結局「道しるべ」が何を意味してたのか理解できなかった。。 自分の中でのいったんの解釈（そしてたぶんこういうことじゃないんだろうなぁ。。と思いつつ）は↑の写真で、最短経路を通る場合の出発ノードから次のノードを出力すればいいの？という理解でいったん実装。 で、BFSはせず（その理解なら必要ない）、例1と例2がACできるように実装して提出したら以下の通り。 提出 ちょいちょいACになったものの、大半はWAもしくはTLEで、これ見てあーやっぱ全然ちげーなこれと思って、本日はここまで。 この時点で10時20分ぐらいでのこり20分ぐらいだったのでそのまま終了。 うーん、Dの解説が雑で題意を理解できない。。ｗ BFSなのはわかったけど、結局何を求めさせたいんだこの問題は。。('A`)","tags":"Tech","url":"posts/2020/05/17/abc168","loc":"posts/2020/05/17/abc168"},{"title":"雑記 20200517","text":"今日は天気も良かったので、妻とぶらぶらお散歩してきた雑記。 東京都は引き続き緊急事態宣言が延長となっているものの、日本全体としては多くの県・地域で緊急事態宣言が解除され、covid19の新規陽性患者数も軒並み減少傾向に。 自分は1~2ヶ月前ぐらいにはもっとひどい状態になると考えていたけど、そこまでには至らず（とはいえ痛ましい死亡者例はちょくちょく発生している）、ピークアウトしようとしている。 実体の感染者数がわかっていないとはいえ（これは結局世界どこでもそうだ）、最終的な死亡者数が大きく増えていない、超過していないというのは事実だろう。 さすがに「死亡者数を偽る」は物理的にも倫理的にも考えにくい。 引き続き警戒は続けるけど、6月には状況がだいぶ回復し、妻の出産時にはもう少し落ち着いているとよいのだけれども。 世界の中でみたら、日本は人口当たりの死者数的には大分優秀みたい。 理由や原因の考察はこれからいろいろあるんだろうけど、そもそものマスク着用率の高さ（とくに流行りはじめの時期は、インフルエンザ予防＋花粉症でマスク着用率が高いシーズンでもあった）と、そもそもの清潔さ、衛生状態が良かったのではないか説。なんとなくだけど、これはあると思う。BCGは関係なさそうかな。。 そんなにいろいろ行ったことあるわけではないけど、実際海外で日本ほど衛生的だなと思ったところはそうない。 北米や欧州の先進国でも、貧困層はいて、日本よりひどいスラムが形成されているというのはわりとよくあるし、そういうところで暮らしてる人々や、出入りする人々から感染が広まる、というのはなんとなくイメージにあう。 もちろん日本にもそういうところはあるけど、それ自体の数も少なければ規模も小さかったんじゃないかなぁ。 いずれにせよ、自分の予想は大幅に裏切られて（とても良かった）、医療従事者のみなさまの必死の努力の甲斐もあり、そこまで大きな被害なくピークアウトしそうな状況にいったんは安堵しています。 これから経済面での復興や、医療体制の拡充はまだまだ必要だし、かつ感染流行の第2派第3派はあるだろうから、引き続き気を引き締めて。 今日は天気もよく、GWも明けて一気に初夏の雰囲気。 神田川沿いに二人でゆっくりお散歩したけど、他にも散歩してる人たちや、ピクニックみたいな感じでランチしてる人たちもいて、外出自粛とは程遠いなとは思ったけど、それでもマスクは当たり前にしてるし、グループどうしもちゃんと距離を取っているとも感じた。 こんな天気のいい日まで引っ込んでると、それこそなんか病気になっちゃいそうだもんね。 ちゃんと気を付けて、閉鎖空間にいすぎないように、健康に日光を浴びよう。 そんな一日でした。 思ったよりゆっくり、長い時間散歩できたので、今日やろうと思ってた練習問題はぜんぜんできなかったけど、それよりも大事な時間がとれたのでヨシ！","tags":"miscellaneous notes","url":"posts/2020/05/17/miscellaneous_notes_20200517","loc":"posts/2020/05/17/miscellaneous_notes_20200517"},{"title":"競プロ Practice 日記","text":"今日は練習問題をちょこちょこ。 AtCoder に登録したら次にやること ～ これだけ解けば十分闘える！過去問精選 10 問 ～ から、関連問題含めて基礎的なやつを中心に。過去やったことあるのも含めてやったけど、始めた当初に挑戦したやつ、今みると何やってるか全然わからなくて、ある意味で成長を感じた。 例えば、 B - Cakes and Donuts に対して、練習で https://github.com/mollinaca/ac/blob/master/code/practice/abc105/b.py というコードを書いてたらしい。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #!/usr/bin/env python3 # -*- coding: utf-8 -*- n = int ( input ()) count = 0 def divs ( n : int ): divs = [] for i in range ( 1 , int ( n ** 0.5 ) + 1 ): if n % i == 0 : divs . append ( i ) if i != n // i : divs . append ( n // i ) # divs.sort() return divs for i in range ( 1 , n + 1 , 2 ): if len ( divs ( i )) == 8 : count += 1 print ( count ) 題意としては、「Nが4か7の倍数」かどうかでおｋ それに対して上記の回答は、Nを素因数分解（わざわざ調べて素因数分解の関数つくったな。。）して、あとなんかわからんことしてる。なんだろこれ。。 今日かいた回答 提出 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/env python3 # -*- coding: utf-8 -*- n = int ( input ()) for i in range ( n ): for j in range ( n ): if i * 4 + j * 7 == n : print ( \"Yes\" ) exit () print ( \"No\" ) 2重ループの全探索。 制約的にはこれで十分おｋ。こう見ると、だいぶ 題意・目的に沿ったプログラム 制約を十分満たす 回答を書けるようになったんだなと思う。3ヶ月ぐらい脳死で簡単なコード書き続けただけの成果はあった気がする。 その他。めも dictから二つのキーでソートする問題 これ python だと地味にムズイというか、数字ならまだなんとかなるけど文字列だとどうしようとなるな。。 なんかデータ構造ちゃんと考えないとできない気がする。 B - Guidebook 順番に都市とスコアを受け取り、 都市名でソート さらにスコアでソート という処理。これの良い解法探しておきたい。 pythonのソートで複数キーを指定するとき これを参考に、dictの中にlistで各要素を k:v の形式でいれて 都市名でソート スコアで（降順）ソート を以下のように実装した。 提出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #!/usr/bin/env python3 # -*- coding: utf-8 -*- n = int ( input ()) d = [] for i in range ( 1 , n + 1 ): city , score = input () . split () d . append ({ 'id' : i , 'restaurant' :{ 'city' : city , 'score' : int ( score )}}) sorted_d = sorted ( d , key = lambda x : ( x [ 'restaurant' ][ 'city' ], - x [ 'restaurant' ][ 'score' ]) ) for l in sorted_d : print ( l [ 'id' ]) これが、スコアが数値型だから降順ソートできたけど、文字列型だったらやり方わからぬ。。 bit全探索 先日練習したやつ、まだ自信ない。。 C - Switches 途中までbit全探索で書けたけど、条件判定のところがうまくかけずカンニングした。。 提出 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #!/usr/bin/env python3 # -*- coding: utf-8 -*- n , m = map ( int , input () . split ()) k = [] s = [] for _ in range ( m ): l = list ( map ( int , input () . split ())) k . append ( l [ 0 ]) s . append ( l [ 1 :]) p = list ( map ( int , input () . split ())) # bit全探索 ans = 0 for i in range ( 2 ** n ): c = 0 # スイッチのOn/Offの状態 # print (i,bin(i)) # 各ライトについて for j in range ( m ): sum = 0 for x in s [ j ]: sum += i >> x - 1 if sum % 2 == p [ j ]: c += 1 if c == m : ans += 1 print ( ans ) これは、自分で作れなかったけど理解はできた。次はできるようにしたい。 その他、昨日リストアップした各アルゴリズムの練習問題、およびABの必須問題の練習について、また明日続きやる。","tags":"Tech","url":"posts/2020/05/16/practice_2020516","loc":"posts/2020/05/16/practice_2020516"},{"title":"来週のPASTに向けて","text":"来週 5/23(土) のPASTに申し込みました。今回は無料です。 https://past.atcoder.jp/ せっかくなので、がんばってエントリーぐらいは取りたいなぁ。 直近勉強してるのも含めて、以下の項目について改めてアルゴリズム部分の復習＆練習をしておこうと思う。 参考ページ レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】 全探索 1-6-4. 全探索に慣れる！ 二分探索 【AtCoder】二分探索の問題を解く AtCoder灰・茶・緑色の方必見！二分探索を絶対にバグらせないで書く方法 DFS&BFS 競プロ覚書：深さ優先探索，幅優先探索 まとめ A - 深さ優先探索 C - 幅優先探索 bit全探索 ビット演算 (bit 演算) の使い方を総特集！ 〜 マスクビットから bit DP まで 〜 6. bit 全探索 2019-02-24 AtCoder ABC 119 C - Synthetic Kadomatsu (300 点) C - Synthetic Kadomatsu Python の標準ライブラリ Pythonで競技プログラミング -ライブラリ編- 競プロで使える！Python標準ライブラリ 練習 ABS AtCoder Beginners Selection 練習問題 AtCoder に登録したら次にやること ～ これだけ解けば十分闘える！過去問精選 10 問 ～ がんばんべ","tags":"Tech","url":"posts/2020/05/15/prepare_past","loc":"posts/2020/05/15/prepare_past"},{"title":"二分探索","text":"今日たまたまやった練習問題 C - Buy an Integer が、二分探索の問題だった。 最初読んでどうやればいいかわからず（計算量的にNの全探索ではないことはすぐわかったが、どうやって減らす？）、 数学的に、累乗の指数から答え付近を探して、そこから探していけばいいのかな～とか考えていたけどうまくいかず解説を読んだら二分探索だった。 あー、二分探索はわかるぞということでがんばって実装した。 提出 最終的に出力する ans をしたから、上限を over として一番上に設定し、二つの平均を求め、 平均が制約の上限より上なら over を平均へ入れ替え、下なら ans を平均といれかえる、というのを繰り返し、 ans と over の差が1以下になったら終了という感じ。 これはちょっと考えたけど、にぶたんということがわかったらなんとなく実装できた！ #!/usr/bin/env python3 a , b , x = map ( int , input () . split ()) ans = 0 over = ( 10 ** 9 ) + 1 while over - ans > 1 : avg = int (( ans + over ) / 2 ) if a * avg + b * len ( str ( avg )) <= x : ans = avg else : over = avg print ( ans )","tags":"Tech","url":"posts/2020/05/12/binsearch","loc":"posts/2020/05/12/binsearch"},{"title":"bit全探索","text":"昨日の ABC167 - C は、bit全探索というアルゴリズムを使った問題だったらしい。知らなかったので学んだ。 bit全探索について簡単にまとめる Python de アルゴリズム（bit全探索） ビット演算 (bit 演算) の使い方を総特集！ どういう手法か 二つの状態を持つ特定の要素群に対して全組み合わせを列挙するのに使う。 状態を \"0\" or \"1\" の二進数で定義し、例えば要素が三つなら 000 001 010 011 100 101 110 111 の8パターンで全てを表現できる、ということ。なるほどと思った。 例題 みかん（100円）りんご（200円）ぶどう（300円）がそれぞれ1つずつ果物屋さんにありました。 財布の中には300円ありますが、考え得るすべての買い物パターンを列挙しなさい。 三つの果物について、買うor買わないを全パターン列挙し、それぞれの値段が条件に収まるか、というもの。 1.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 # -*- coding: utf-8 -*- money = 300 item = (( \"みかん\" , 100 ), ( \"りんご\" , 200 ), ( \"ぶどう\" , 300 )) n = len ( item ) #print (item) for i in range ( 2 ** n ): bag = [] total = 0 for j in range ( n ): # このループが一番のポイント if (( i >> j ) & 1 ): # 順に右にシフトさせ最下位bitのチェックを行う #print (j) bag . append ( item [ j ][ 0 ]) # フラグが立っていたら bag に果物を詰める total += item [ j ][ 1 ] if ( total <= money ): print ( total , bag ) Qiitaの参考記事にもあるが、0or1のフラグチェックをシフト演算で行うのがミソ。これもなるほどと思った。 上記を一般化した例。 2.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #!/usr/bin/env python3 # -*- coding: utf-8 -*- # 1.py を一般化 # n = 入力される商品数 # m = 所持金 n , m = map ( int , input () . split ()) # a1,p1 = 商品名、値段 # ... # an,pn item = [] for _ in range ( n ): l = list ( map ( int , input () . split ())) item . append ( l ) #print (item) for i in range ( 2 ** n ): bag = [] price = 0 for j in range ( n ): if (( i >> j ) & 1 ): bag . append ( item [ j ][ 0 ]) price += item [ j ][ 1 ] if price <= m : print ( price , bag ) これで、「二つの状態を持つ要素」に対して「組み合わせの全列挙」ができるようになった。 例題 abc079_c:TrainTicket abc167_c:SkillUp 解いてみる。","tags":"Tech","url":"posts/2020/05/11/bit-fullsearch","loc":"posts/2020/05/11/bit-fullsearch"},{"title":"AtCoder Beginner Contest 167","text":"今日は2問だけ。。 復習しよう。 A A - Registration Tから一文字削ったものがSと一致すればよい 提出 B B - Easy Linear Programming ABCの順に並べ、K が A以下、A以上B以下、B以上C以下の3パターンで場合分けして求めればよい。 提出 条件書き間違えて1WA... Cをちょっと眺めたけど、今日は事情ありここで離脱。 たぶんCもできなかっただろうなこれ。。 別途復習しておこう。","tags":"Tech","url":"posts/2020/05/10/abc167","loc":"posts/2020/05/10/abc167"},{"title":"\"#検察庁法改正案に抗議します\" について","text":"本日の Twitter のトレンドで \"#検察庁法改正案に抗議します\" というのが急浮上して話題になっていた。 「＃検察庁法改正案に抗議します」投稿広がる 380万超に 検察庁法改正に抗議、ツイッターで470万超 著名人も 「 #検察庁法改正案に抗議します 」ハッシュタグに470万件の声、なぜここまでの炎上が起こるのか 東京高検黒川弘務検事長の定年延長を行った閣議決定を直ちに撤回することを求める会長声明 ほんとに、ジャンルを問わずに著名な方々が賛同を表明している。 近年、政治の話題でここまで一致団結するようなことがあっただろうかと思う。 #検察庁法改正案に抗議します pic.twitter.com/QeVYWObxTc — きゃりーぱみゅぱみゅ (@pamyurin) May 10, 2020 さすがにこのカジュアルな図ほどシンプルな話ではないのではと思うんだけど。。。 とはいえ、抗議に賛同を表明されている方々は、具体的な問題点の指摘がなくて正直よくわからん。 一連の法案の経緯？ 正確かどうか、真実かどうかはさておき。。。 ある程度理解できる日本語で説明されている方がおられたので転載。 いやまあ理由はいろいろあったんだけど従来は定年が一般公務員60歳に対して検察官63歳だったところ前者を65歳に伸ばすんだから後者もそれなりに引き上げないとまずいだろ常識的に考えて（頭痛）。 — Takehiro OHYA (@takehiroohya) May 10, 2020 また、こちらにも。 いったい検察庁法改正案の何に抗議しているのか #検察庁法改正案に抗議します がトレンドにあるのを受け、問題の本質を見誤らないよう書きました 以下はミスリーディングで注意が必要 ①黒川氏定年延長のため ②黒川氏を検事総長にするため ③政権への捜査を免れるため ④三権分立が脅かされる ⑤内閣が検察官人事に介入する https://t.co/rnSXy4SCP3 — とんふぃ@スマニュー/ZeLo (@tonghwi17) May 10, 2020 つまりこの法案は現検事長という特定の1名のためのものではなく、もともと以前から審議が進められてきてたもので、それがこのタイミングで可決かどうか、という状況らしい。 これはまぁそうなのかもしれないけど、だとするとその点においてはこっちでの説明（多くの反対されてる方はこういう捉え方みたい）と真っ向から食い違う。 誰のための法案なのか？ ここまで見てて確実に意見（解釈）が分かれるのは、すなわちこの法案が可決したとして「今の検事長に対して効力を及ぼすのかどうか」という点だと思う。 ここが正なら自分は反対だなぁと思う。断固とする根拠はないけどキナくさすぎる。 逆に偽なら、ようするに公務員の定年延長で2022年施工の話だからまぁいんじゃねって感じ。 自分の意見 ようわからんので態度保留。 賛成なら署名しよう。 change.org - 内閣総理大臣-要請-東京高検-検事長黒川弘務氏の違法な定年延長に抗議し-辞職を求めます ただこの署名、発信者が「安倍9条改憲NO！ 全国市民アクション」っていう団体なので、その団体に賛同するのはちょっと嫌だなぁ。。 あくまでこの内容に絞ってで。。 Twitter のトレンド入りは意味あるの？ あるの？なんかすごくツイートしてる人が多いのと、加えてトレンドの目安として出るツイート件数が増えたり減ったりで疑惑！！みたいなことを言ってる人を見かけるが、それは違うのではと。。 トレンドは単なる「時間単位でのツイート数」だと思うので、一斉につぶやけば一斉に減るでしょう。。 あまりに話題になってるのでよっぽどなのかと思ったけど、そこまでのことなのか？というのはイマイチピンとこなかった。 直近コロナ対策を見てて、あまりにも政府や自治体に権限がなくて封鎖もできない（＝独裁権力からは程遠い）日本という国において、この内容で「三権分立が脅かされる！」というのはある意味正常な反応なのかもしれない。","tags":"Social","url":"posts/2020/05/10/social_20200510","loc":"posts/2020/05/10/social_20200510"},{"title":"AWS EC2 と GitHub Pages で作る 無料ハニーポット&公開ページ（作成中）(4)","text":"update daily/hourly の選択 任意の時刻の入力 表示ボタン が実装されて、任意のデータを取得できるようになった。 とりあえず機能ができただけで、バリデーションもないしエラーハンドリングもないから、APIとして存在しないファイル名の入力もできるし、その場合は単純にデータが表示できなくなる。 バリデーションについては、「数字のみ」を受け取るようにするが、データとして適切な数字かどうかのチェックは js ではできない（jsが正解の一覧を持つことができない、そういう情報がない）ので、 数字の入力は受け付けて、その情報をもとにリクエスト用のURLを組み立て、取得できれば表示するし、できなければ(404)なら適切なエラーハンドリング、という感じでい引き続き実装する。 こんな感じ。とりあえず感がすごいｗ その他修正や追加など けっこういろいろ直した。。 ipwhois で取れなかった場合のエラー処理 韓国の krnic に問い合わせたら 404 返されてた。。 これに限らず、HTTPリクエストは失敗の可能性があるので適切なエラーハンドリングが必要。 今回は python の try-catch を使い、失敗したらその旨をそのまま国コードの文字列に入れることにした。 ついでに機能を（複数個所で同じ実装使ってたので）関数に切り出した。 修正 テーブル表示において、「アクセス試行回数が多い順」ソートで表示できてなかった これはそもそもjsのお勉強。 jsでは連想配列というものは存在しておらず、いわゆる連想配列は \"オブジェクト\" と呼ばれるもので、これは連想配列みたいな見た目をしているが連想配列ではないらしい。 なので、連想配列に通常期待されるような機能もない。 連想配列の value でソートしたい場合のテクニックを以下から拝借して実装した。 意図は理解できたので、たぶん正しく実装されているはず。 【JavaScript】連想配列の値(value)で並び替え しかし、こんな基本的な機能が標準でサポートされてないのかjs... 修正 secureログから、\"Did not receive identification string\" のパターンを追加 実際secureログってよくわかってなくて、どういうパターンを取得すればいいの？は適当。 というか正解は、「全部を取る」か、「セッションID単位で全部取る」、なんだろうけど。 ここは今回こだわるポイントではないのでよしなにやってるところ。 実装 ただ、テーブル表示のほうへは反映されてないのでデータとしては現れていない。 別途追加する。 ログを手動で取り直したい場合用のスクリプト 再実行用。 コマンド引数に任意の値を入れると、その時間だけ前の時間のログを取得する。 もちろん /var/log/secure に残っていれば、だけど。 実装 このスクリプトはあくまで手動実行、リカバリ用なので、自動で git へ push はしない。 再取得した内容を確認して、問題なければ手動で push すること。 引き続きやること フロントエンドのいいカンジ化、APIを使って json のデータはなんとかとれたので、これを集計してチャートにしてみたい テーブルはだせたので、チャートやグラフとか。なんかそういうライブラリあると思うので調べる → google のグラフ描画のやつが良さそう。地理情報からも出せるっぽい。デベロッパキーがいるみたいだけどまた調べてみよう 別の日時を指定してデータを表示とか 日時、時刻を指定して、そのタイミングで情報を更新する昨日 いまは1時間単位のデータなので、1日単位とか、一定期間とか？ → 1日単位はログ作った → とりあえずの機能はできた :clap: エラー処理（Gitへのコミット失敗（GitHubたまに落ちてるしね）を検知して通知、再実行とか） → pythonのスクリプトにおいて whoisが失敗するパターンのエラーハンドリングができた 他のログの追加 ページをタブ化して、デフォルトでssh（secure）ログを選択しつつ、タブ切り替えでほかのログを同じように表示するとか","tags":"Tech","url":"posts/2020/05/09/pot4","loc":"posts/2020/05/09/pot4"},{"title":"AWS EC2 と GitHub Pages で作る 無料ハニーポット&公開ページ（作成中）(3)","text":"昨日 の続き。 bugfix ログ取得スクリプトにバグがあり対応。 23時台のログだけ日付が間違っている（翌日の日付が入ってしまっている）ことがあったのに気付き修正。 原因はシンプルで、ログに挿入する日付を生成するときに、 現在時刻を取得 取得した現在時刻から日付を生成 としていたため、24時を回った0時台に前日23時台のログを取得した場合に、ログから見たら「翌日」の日付となってしまっていた。 Issue 機能追加 国コードの取得と表示 ログ生成の際に、アクセス元IPアドレスからカントリーコードを取得してログに挿入するようにした。 また、IPアドレス表示の際にあわせてカントリーコードを表示するようにしてみた。 見てると、NL（オランダ）が結構多い模様？以外。 経験上、この手のアクセスは大抵ホスティングベンダからなので、そういうことをさせちゃってるベンダがあるんだろうな。そこまで調べてないけど。 カントリーコードはWhois引けばほぼ確実にとれるからいいけど、事業者情報とれたりとれなかったりするので、そこまでパースするのはマンドクセーからいいや。 24時間分のログを作成 0時を回ったタイミングで、前日1日分の24時間のログを集計した24時間分ログを作成するようにした。 ただしこれを表示する機能がまだないので、表示はできていない。 いずれ、ページで「1時間単位」or「1日単位」で選択できるようにして、日付と時刻から該当のログを引っ張れるようにしたい。そんな難しくないはず。 やってみたけどやめた ログや各種情報が表示されるまでに、ロード中のぐるぐるを出しておこうと思ってやってみたけど、現状API一発で1秒未満で表示されるので、一瞬表示されるだけだったのでやめた。 ちなみにぐるぐるはこのページから借りた。 Preloaders.net いろいろあって楽しい。ほんとに必要そうになったらまた借りよう。 引き続きやること フロントエンドのいいカンジ化、APIを使って json のデータはなんとかとれたので、これを集計してチャートにしてみたい テーブルはだせたので、チャートやグラフとか。なんかそういうライブラリあると思うので調べる → google のグラフ描画のやつが良さそう。地理情報からも出せるっぽい。デベロッパキーがいるみたいだけどまた調べてみよう 別の日時を指定してデータを表示とか 日時、時刻を指定して、そのタイミングで情報を更新する昨日 いまは1時間単位のデータなので、1日単位とか、一定期間とか？ → 1日単位はログ作った エラー処理（Gitへのコミット失敗（GitHubたまに落ちてるしね）を検知して通知、再実行とか） 他のログの追加 ページをタブ化して、デフォルトでssh（secure）ログを選択しつつ、タブ切り替えでほかのログを同じように表示するとか","tags":"Tech","url":"posts/2020/05/07/pot3","loc":"posts/2020/05/07/pot3"},{"title":"AWS EC2 と GitHub Pages で作る 無料ハニーポット&公開ページ（作成中）(2)","text":"昨日 の続き。 現在のページ JSをがりがり書いて、ログを集計してテーブルで表示できるようになった。 この表示処理は、ページを onload したタイミングで実行される JavaScript で実行される。 JSのソースは こちら // index.js // called at last of index.html </body> //------------------------ // Global Variables //------------------------ const API_ENDPOINT = 'https://mollinaca.github.io/pot/api/' //latestFilename = undefined; //let latest_log = undefined; //------------------------ // Functions //------------------------ // window.onload initialize function init () { // console.log (\"init()\") let metadata = new XMLHttpRequest (); let metadata_url = API_ENDPOINT + 'metadata.json' // console.log(`21: ${metadata_url}`) metadata . open ( 'GET' , metadata_url , true ); metadata . responseType = 'json' ; metadata . onload = function () { let json = this . response ; let latestFilename = json . metadata . ssh . latest ; // console.log(`25: ${latestFilename}`) jsonbox_name . innerHTML = \"latest log: \" + \"<a href=\\\"\" + API_ENDPOINT + latestFilename + \"\\\">\" + API_ENDPOINT + latestFilename + \"</a>\" ; let log = new XMLHttpRequest (); let log_url = API_ENDPOINT + latestFilename // console.log (log_url) log . open ( 'GET' , log_url , true ); log . responseType = 'json' ; log . onload = function () { let jsonbox_body = document . getElementById ( 'jsonbox_body' ); let res = this . response ; // console.log(typeof res) jsonbox_body . innerHTML = JSON . stringify ( res ); let logs = res . logs ; // console.log(json) // console.log(typeof logs) // console.log(logs) // console.log(typeof logsp) // console.log(logs[0]) // summary let count_cc = 0 ; let count_iu = 0 ; let count_user = {}; let count_ip = {}; Object . keys ( logs ). forEach ( function ( key ) { ip = logs [ key ]. ip ; if ( count_ip [ ip ]) { count_ip [ ip ] += 1 } else { count_ip [ ip ] = 1 }; if ( logs [ key ]. log_type_sub == \"Connection closed\" ) { count_cc += 1 } else if ( logs [ key ]. log_type_sub == \"Invalid user\" ) { count_iu += 1 user = logs [ key ]. user // console.log(user) if ( count_user [ user ]) { count_user [ user ] += 1 } else { count_user [ user ] = 1 }; } else { // console.log(logs[key].log_type_sub) }; }); // user を回数で sort let user_keys = []; for ( var key in count_user ) user_keys . push ( key ); function Compare ( a , b ){ return count_user [ b ] - count_user [ a ]; } user_keys . sort ( Compare ) // ip を回数で sort // console.log(count_ip) let ip_keys = []; for ( var key in count_ip ) ip_keys . push ( key ); function Compare ( a , b ){ return count_ip [ b ] - count_ip [ a ]; } ip_keys . sort ( Compare ) // table1 let tablebox1 = document . getElementById ( 'tablebox1' ); let table1_summary_html = \"<table>\" ; table1_summary_html += \"<tr><th> サマリ <th></tr>\" ; table1_summary_html += \"<tr><td> ログ行数 </td><td> \" + logs . length + \"</td></tr>\" ; table1_summary_html += \"<tr><td> Connection closed </td><td> \" + count_cc + \"</td></tr>\" ; table1_summary_html += \"<tr><td> Invalid user </td><td> \" + count_iu + \"</td></tr>\" ; table1_summary_html += \"</table>\" ; tablebox1 . innerHTML = table1_summary_html ; // table2 ユーザ別 let tablebox2 = document . getElementById ( 'tablebox2' ); let table2_summary_html = \"<table><tr><th> ユーザ名 </th><th> 試行回数 </th></tr>\" ; // console.log(\"table2\"); // console.log(count_user); if ( Object . keys ( count_user ). length > 3 ) { max = 3 } else { max = Object . keys ( count_user ). length }; for ( let i = 0 ; i < max ; i ++ ) { table2_summary_html += \"<tr><td> \" + user_keys [ i ] + \" </td><td> \" + count_user [ user_keys [ i ]] + \" </td></tr>\" ; } table2_summary_html += \"</table>\" ; tablebox2 . innerHTML = table2_summary_html ; // table3 IPアドレス別 let tablebox3 = document . getElementById ( 'tablebox3' ); let table3_summary_html = \"<table><tr><th> IPアドレス </th><th> 試行回数 </th></tr>\" ; // console.log(\"table3\"); // console.log(count_ip); if ( Object . keys ( count_ip ). length > 3 ) { max = 3 } else { max = Object . keys ( count_ip ). length }; for ( let i = 0 ; i < max ; i ++ ) { table3_summary_html += \"<tr><td> \" + ip_keys [ i ] + \" </td><td> \" + count_ip [ ip_keys [ i ]] + \" </td></tr>\" ; } table3_summary_html += \"</table>\" ; tablebox3 . innerHTML = table3_summary_html ; }; log . send (); } metadata . send (); } ///----------------------- window . onload = init ; javascriptの経験はないので、完全にノリでテキトーに書いてる。 HTTP API で取得した json を集計したり、HTMLに出力したりできるようになってきた。 ガッツリやるつもりはないけど、モノを作ってみるのは楽しい。 引き続きやること フロントエンドのいいカンジ化、APIを使って json のデータはなんとかとれたので、これを集計してチャートにしてみたい テーブルはだせたので、チャートやグラフとか。なんかそういうライブラリあると思うので調べる。 別の日時を指定してデータを表示とか 日時、時刻を指定して、そのタイミングで情報を更新する昨日 いまは1時間単位のデータなので、1日単位とか、一定期間とか？ エラー処理（Gitへのコミット失敗（GitHubたまに落ちてるしね）を検知して通知、再実行とか） 他のログの追加 ページをタブ化して、デフォルトでssh（secure）ログを選択しつつ、タブ切り替えでほかのログを同じように表示するとか。","tags":"Tech","url":"posts/2020/05/06/pot2","loc":"posts/2020/05/06/pot2"},{"title":"AWS EC2 と GitHub Pages で作る 無料ハニーポット&公開ページ（作成中）","text":"GW の自由工作的な。 成果物（作成中） hstn-pot いまはまだ、アクセスすると最新の集計ログの json が表示されるだけだけど。。 Architecture SecurityGroup で EC2 の ssh/22 を解放し、外部からのアクセスを受け付ける 22番を解放しているためアクセスは来るが、実際にアクセスができるのは鍵認証ができる特定ユーザのみ 1時間に1回アクセスログを集計し、以下の二つで記録されたものを抽出してjsonに整形して repo へ push Invalid user Conncection closed 現在のスクリプト: secure.py #!/usr/bin/env python3 # -*- coding: utf-8 -*- import sys , os import re import json import datetime import pathlib import git def targetlines ( now : datetime , LOGFILE : pathlib . PosixPath ): \"\"\" get logs previous 1 hour \"\"\" with open ( LOGFILE ) as f : lines = [ s . strip () for s in f . readlines ()] log = [] search_target_time = ( now + datetime . timedelta ( hours =- 1 )) . strftime ( \"%b %-d %H\" ) for line in lines : if line . find ( search_target_time ) >= 0 : log . append ( line . split ()) return log def operate ( lines : list , now : datetime ): \"\"\" ログの内容ごとに抽出する \"\"\" logs = [] date = now . strftime ( '%Y-%m- %d ' ) tz = \"+09:00\" log_type = \"ssh\" for line in lines : if \"Connection\" in line and \"closed\" in line : time = line [ 2 ] log_type_sub = \"Connection closed\" ip = line [ 8 ] log = { \"date\" : date , \"time\" : time , \"TZ\" : tz , \"log_type\" : log_type , \"log_type_sub\" : log_type_sub , \"ip\" : ip } logs . append ( log ) elif \"Invalid\" in line and \"user\" in line : time = line [ 2 ] log_type_sub = \"Invalid user\" user = line [ 7 ] ip = line [ 9 ] log = { \"date\" : date , \"time\" : time , \"TZ\" : tz , \"log_type\" : log_type , \"log_type_sub\" : log_type_sub , \"user\" : user , \"ip\" : ip } logs . append ( log ) else : pass j = { \"ok\" : True , \"logs\" : logs } return j def main (): LOGFILE = pathlib . Path ( \"/var/log/secure\" ) SCRIPT_DIR = pathlib . Path ( __file__ ) . resolve () . parent PJ_DIR = SCRIPT_DIR . parents [ 0 ] OUTPUT_DIR = pathlib . Path ( str ( PJ_DIR ) + \"/docs/api/\" ) now = datetime . datetime . now () lines = targetlines ( now , LOGFILE ) j = operate ( lines , now ) OUTPUT_FILE_NAME = \"ssh_\" + ( now + datetime . timedelta ( hours =- 1 )) . strftime ( '%Y-%m- %d _%H' ) + \".json\" OUTPUT_FILE = pathlib . Path ( str ( OUTPUT_DIR ) + \"/\" + OUTPUT_FILE_NAME ) with open ( OUTPUT_FILE , mode = 'w' ) as f : f . write ( json . dumps ( j , indent = 4 )) # update metadata.json METADATA_FILE_NAME = \"metadata.json\" METADATA_FILE = pathlib . Path ( str ( OUTPUT_DIR ) + \"/\" + METADATA_FILE_NAME ) with open ( METADATA_FILE , mode = \"r\" ) as f : metadata_json = json . load ( f ) metadata_json [ 'metadata' ][ 'ssh' ][ 'latest' ] = OUTPUT_FILE_NAME with open ( METADATA_FILE , mode = \"w\" ) as f : f . write ( json . dumps ( metadata_json , indent = 4 )) # commit to git git_repo = git . Repo ( PJ_DIR ) git_repo . index . add ( str ( OUTPUT_FILE )) commit_message = \"[batch] add \" + str ( OUTPUT_FILE_NAME ) git_repo . index . commit ( commit_message ) git_repo . index . add ( str ( METADATA_FILE )) commit_message = \"[batch] update \" + str ( METADATA_FILE ) git_repo . index . commit ( commit_message ) git_repo . remotes . origin . push ( 'HEAD' ) if __name__ == '__main__' : main () json 形式のログは、GitHubPagesを使ってAPIとして公開 URL例: https://mollinaca.github.io/pot/api/ssh_2020-05-04_04.json GitHubPages の index.html では、上記のAPIを使い最新の情報をなんらかいいカンジに可視化（作業中） 作業進捗 専用のEC2を構築 ログを取得、json に整形して git へ push するスクリプト (Python製) 上記を自動化して、1時間に1回自動更新するように index.html を作成（フロントエンド入門編！） HTML/CSS/JavaScript を手組で作成中 引き続きやること フロントエンドのいいカンジ化、APIを使って json のデータはなんとかとれたので、これを集計してチャートにしてみたい 別の日時を指定してデータを表示とか エラー処理（Gitへのコミット失敗（GitHubたまに落ちてるしね）を検知して通知、再実行とか） 上記までできたら 別のログの追加 WEBサーバ（ WP や phpMyAdmin などハニーポット向きなやつ）たてて、怪しいアクセスログを同じく集計 Postfix とか MySQL とか Jenkins とか フリーのEC2インスタンス（t2.micro）なので、あまりたくさんはできなさそう というのを、引き続きやっていきたい。 現在のページ まだショボショボｗ","tags":"Tech","url":"posts/2020/05/05/pot","loc":"posts/2020/05/05/pot"},{"title":"pyenv の Python にインストールされた pipenv の仮想環境にインストールされた Python を cron で動かす","text":"Python 実行環境 OSのPythonは触らずに、pyenv を使いユーザローカルに Python をインストールする。 その Python の pip に pipenv をインストールし、その pipenv を使って Python の仮想環境を構築する。 ここで実行された仮想環境上の Python を、OSの cron から実行する。 cron サンプル # cat /etc/cron.d/p # init pyenv export PYENV_ROOT=\"$HOME/.pyenv\" export PATH=\"$PYENV_ROOT/bin:$PATH\" eval \"$(pyenv init -)\" # cron job SCRIPT_DIR=/root/scriptdir 01 * * * * root cd \"${SCRIPT_DIR}\"; source /root/.local/share/virtualenvs/script-XXXXXXX/bin/activate; ./script.py cron ファイルは、直接環境変数の指定などができる。 説明 cron ジョブにおいて、環境変数の指定と、pyenvを有効化する。 続いて、Pipfile が置いてあるディレクトリに移動し、pipenv を activate する。 すると、pipenv仮想環境にインストールされた Python を実行できるようになる。","tags":"Tech","url":"posts/2020/05/04/cron_pyenv_pipenv","loc":"posts/2020/05/04/cron_pyenv_pipenv"},{"title":"ルータのレイテンシ測定記録","text":"もともとつかってたルータが急に調子悪くなってしまい、急遽眠ってた控えのルータを稼働させているがなかなか調子よくて助かった。 しかし、稼働中の PC - ルータ 間の smokeping を見てるんだけど、この latency の差はなにで生まれてるのか悩ましい。。単純に使ってる時間のほうが短くなるのかしら pic.twitter.com/Mw0qrH2sX0 — mollinaca (@syoutin) May 4, 2020 5年ぐらい使ってたASUSのルータが調子悪くなってきて、とつぜんインターネットとの接続が消れるようになった。。 なんどか再起動したりしてもダメだったので、暫定で控えにいた使っていないルータ（妻が以前使っていたもの）にバトンタッチして様子見中。 いわゆるNECの普通の家庭用ルータだけど、機能的にはまぁ問題ないやつだったのでよかった。 これの何年か前の機種。Atermってよく見るやつだね。 こいつを使ってインターネット接続後、しばらく PC - ルータ 間の latency を見ていたんだけど、 という感じで、latencyが低いときと高い時があることに気づいた。 それぞれ何をしていたのかというと、 みたいな感じ。 使われていない idletime の時は一定をキープ ゲームで使われており、ステートフルなセッションが張られていると低い値で推移 使われている状態で、普通にインターネット（httpやssh程度）のみだと、上記の中間のような状態 になるように見える。 使ってるときと使ってないときで、状態に違いがあるのはたぶんそういうことなんだろうな。 面白いので、しばらく経過観察してみる。","tags":"Tech","url":"posts/2020/05/04/router_latency","loc":"posts/2020/05/04/router_latency"},{"title":"AtCoder Beginner Contest 166","text":"今日はDまでできた！よかったー。 Dも1WAしたけど、単純なポカミスをやらかしてしまいなので、ロジック的には1発で通せた。 今回は運がよかったというのも大分あるけど、久々の4完でちょっと嬉しい＾＾ A A - A?C 入力が \"ABC\" なら \"ARC\" を出力、 \"ARC\" なら \"ABC\" を出力するというもの。 言われた通りに実装して終わり。 提出 #!/usr/bin/env python3 s = input () print ( \"ABC\" ) if s == \"ARC\" else print ( \"ARC\" ) B B - Trick or Treat お菓子を持っていないすぬけ君の人数を出力すればよい。 最初に 1~N のリストを作り、お菓子を配られた番号は抜いていき、最後に残った要素数を出力した。 提出 #!/usr/bin/env python3 n , k = map ( int , input () . split ()) l = list (( range ( 1 , n + 1 ))) for _ in range ( k ): d = int ( input ()) A = list ( map ( int , input () . split ())) for i in A : if i in l : l . remove ( i ) print ( len ( l )) C C - Peaks グラフの問題。 各頂点に隣接する頂点で、自分より高いものがない（もしくは隣接する頂点がない）ものの数を出力すればよい。 グラフ理論の問題ということはすぐにわかるが、データの表現にちょっと苦戦して時間を食ってしまった。。 最初に各頂点を \"good\" で初期化した dict を作り、入力を受け取りながら、隣接点に自分より高いものがあれば、 \"bad\" に置き換えて、 最後に残った \"good\" の数を数えるという方針で実装した。 なお、最初に \"good\" で初期化したのは、一度も入力に隣接点が現れない頂点は「良い灯台」であるという制約に従うため。 提出 #!/usr/bin/env python3 n , m = map ( int , input () . split ()) H = list ( map ( int , input () . split ())) T = {} for i in range ( 1 , n + 1 ): T [ i ] = \"good\" for _ in range ( m ): a , b = map ( int , input () . split ()) if H [ a - 1 ] <= H [ b - 1 ]: T [ a ] = \"bad\" if H [ a - 1 ] >= H [ b - 1 ]: T [ b ] = \"bad\" #print (T) #確認用 print ( list ( T . values ()) . count ( \"good\" )) dict の中で value が特定の値である key の数を数える、の実装テクニックを学んだ。 D D - I hate Factorization 数学っぽい問題だったが、結局数学0でACできた。 因数分解して条件絞れるのかなー？と思い因数分解に挑んだけど、ちょっとやってあんまり役に立たなそうだったので中断。 A&#94;5 も B&#94;5 も大きい数で、Xは 10&#94;9 以下なので、実は A と B の範囲って結構狭いのでは？という直観で、0から正負に探索範囲を広げていく全探索を実装。 1回目の提出時に正解条件を誤ってしまったため1WAだったが、修正して2回目でAC。 提出 #!/usr/bin/env python3 x = int ( input ()) p = 0 while True : p += 1 for i in range ( - p , p ): for j in range ( - p , p ): if i ** 5 - j ** 5 == x : print ( i , j ) exit () TLEするかなーと思ったけど結果的にACで、「実は探索範囲がそんなに広くない」の直観も当たっていたぽい。 ラッキーだった。 E E - This Message Will Self-Destruct in 5s 時間があったので、Eもチャレンジ。 ただこれは明らかに実装力がなくてTLEな回答しか作れないなーと感じ、一回提出して終了。 ふつーに全探索で全部探して数え上げで書いてみたけど、これはまぁTLE。なんらかアルゴリズムで効率よく探していくような雰囲気だろうなーと感じた。 提出 ※TLE #!/usr/bin/env python3 n = int ( input ()) A = list ( map ( int , input () . split ())) c = 0 for i in range ( n - 1 ): for j in range ( i + 1 , n ): if A [ i ] + A [ j ] == j - i : c += 1 print ( c ) シンプルな全探索。当然TLE。 とはいえ今日は無事Dまで解けた。 しばらくはCまでをさくっと通してDもクリアしての4完の安定を目標に、Problemsで過去問やっていこうー。","tags":"Tech","url":"posts/2020/05/03/abc166","loc":"posts/2020/05/03/abc166"},{"title":"AtCoder Beginner Contest 165","text":"GW週末、ABC二夜連続ナイトの1日目。 今日のCは難しすぎた。。もうちょっと早くDに挑んでればDはできたかもだったけど、Cに時間かけすぎてしかもできなかった。。orz C難しい難しい言われてるから茶パフォ的には落としてもしゃーないかもって感じだけど、代わりにDがとれてればなぁというところ。 A A - We Love Golf k の倍数が A から B の間にあるかどうか。 O(1)で解けそうな気がしたけど、考えるよりも先に素直にループ回したほうがいいなと思い、 AからBの間の i で i%k == 0 となるやつがあれば \"OK\" として終了 提出 B B - 1% 複利の計算。複利の計算て、普通に算数の問題として難しい。 今回は制約から、小数切り落としなのでB向けにマイルドにはなってるけど、まず複利ってうい概念自体がちょっと難しいよね。 制約通りに実装してAC。 提出 C C - Many Requirements まず、問題文から難解。。 意図はなんとか理解できたけど、実装を考えつかずパス。 Twitter 見てると、10重ループ書いて無理やり通したみたいなのがちらほら、、まじか。。 解説みてもやっぱりわからんし、なんだろうこれは。。 D D - Floor Function これはもうちょい時間あれば解けたー。。無念。 floorが紛らわしいけど、分解してみれば単調増加関数のため、基本は x=n のときが最大になるハズ、はすぐにわかった。 その上で例外条件として、 floor の分岐で後ろの項を小さくできそうだなと思い、そこを探しているところでタイムアップ。 ぎりぎりに提出したけど、ちょいっとミスがあり 9/10 の1WAでACならず。。 提出 マジで実装がギリギリ。ｗ これは解説を読んで理解。 あー、確かにという感じで、再度書き直して以下でAC。 提出 Cよりよっぽど簡単だったのでは。。 数学的考察が必要なだけで、実装の難易度はB以下な感じの問題だったので、CとDが逆だったのでは疑惑すらあるABC165でした。 えーん、灰に逆戻り(´；ω；｀) と思ったら、 unrated かもとのこと？ まぁ灰/茶なんて小さな差だからどっちでもいいっちゃいんだけど。。 【ABC165】E問題において、問題文に書かれている制約と、実際に異なる入力が与えられていたことが発覚しました。現在対応を協議中です。 — AtCoder (@atcoder) May 2, 2020","tags":"Tech","url":"posts/2020/05/02/abc165","loc":"posts/2020/05/02/abc165"},{"title":"CentOS8 に WordPress をインストールする","text":"環境 ローカルVM モノ 情報 IPアドレス 192.168.56.101 /etc/redhat-release CentOS Linux release 8.1.1911 (Core) uname -r 4.18.0-147.8.1.el8_1.x86_64 インストールするもの モノ バージョン apache 2.4 php 7.4 MySQL 8.0.17-3 WordPress 5.4.1 apache インストール # dnf -y install httpd mod_ssl 起動 # systemctl enable httpd # systemctl start httpd http://192.168.56.101 へアクセスし、Apacheのテストページが表示されることを確認 php remi Repository を追加 # dnf install http://rpms.famillecollet.com/enterprise/remi-release-8.rpm # dnf install mod_php # dnf info php74 --enablerepo=remi # dnf install php74-php-cli php74-php-fpm php74-php-mysqlnd php74-php-opcache php74-php-mbstring --enablerepo=remi # systemctl start php74-php-fpm # systemctl enable php74-php-fpm 確認 # php74 -r 'print \"Hello, World!\\n\";' # cd / var /www/html # vin phpinfo . php ======= <?php phpinfo (); ======= http://192.168.56.101/phpinfo.php へアクセスし、 phpinfo が表示されることを確認 MySQL AppStreamからインストール # dnf install mysql mysql-server # systemctl enable mysqld.service # systemctl start mysqld # mysql_secure_installation → 初期セットアップを完了する * root のパスワードを設定 * Remove anonymous user → Yes * Disallow root login remotely → Yes * Remove test database → Yes * Reload Privilages tables now → Yes → All done! 確認 # mysql -uroot -p Password: mysql> select * from mysql.user \\G → アカウント情報を確認 WordPress MySQL に Wordpress 設定 # mysql -uroot -p mysql> CREATE DATABASE wpdb; mysql> CREATE USER 'wp'@'localhost' identified by '{password}'; mysql> GRANT ALL on wpdb.* TO 'wp'@'localhost'; インストール Wordpress最新版のソースを入手 https://ja.wordpress.org/download/ 20200502 本日時点では、 5.4.1 の模様 # cd / usr / local / src # wget https :// ja . wordpress . org / latest-ja . tar . gz # tar zxvf latest-ja . tar . gz # mv wordpress / var / www / html / # cd / var / www / html / # chwon root : root -R / var / www / html / wordpress # cd wordpress # cp -pi wp-config-sample . php wp-config . php # vi wp-config . php ======================= define ( 'DB_NAME' , 'database_name_here' ); ↓ define ( 'DB_NAME' , 'wpdb' ); define ( 'DB_USER' , 'username_here' ); ↓ define ( 'DB_USER' , 'wp' ); define ( 'DB_PASSWORD' , 'password_here' ); ↓ define ( 'DB_PASSWORD' , '{password}' ); define ( 'DB_CHARSET' , 'utf8' ); ↓ define ( 'DB_CHARSET' , 'utf8mb4' ); define ( 'DB_HOST' , 'localhost' ); ↓ define ( 'DB_HOST' , 'localhost:/var/lib/mysql/mysql.sock' ); ======================= 以上まで完了したら、ブラウザで http://192.168.56.101/wordpress へアクセスして、WordPress の初期設定画面が表示されることを確認 上記項目をいれて、無事インストールが完了されば構築完了。","tags":"Tech","url":"posts/2020/05/02/wp","loc":"posts/2020/05/02/wp"},{"title":"小川一水 ツインスター・サイクロン・ランナウェイ","text":"小川一水 ツインスター・サイクロン・ランナウェイ ちょっと前に読み終わってたけど、感想書いておこうと思う。 物語 概要 小川一水お得意の、遠未来・人類が宇宙へ進出して数千年か数万年かの未来、遥か遠くのどこかの惑星、独自の文化、経済圏で暮らす世界。 その世界では、惑星の周りを飛び回る魚のような鉱物を採集する「漁」が重要な産業を果たしており、その「漁」は通例夫婦の男女一組で、専用の漁船（宇宙船）を介して行われる。 そんな世界で起きた、普通ではない少女と少女の組み合わせで漁に挑む少女たちの、やたら人間味溢れる冒険譚。 感想 世界観、およびキャラクター共にとても小川一水。遥か遠くの未来で、いまの世界の常識なんて通用しそうにない世界なのに、やたら既視感のある登場人物たちとコミュニケーション。 ある意味とても安心して読める小川一水の中編。 物語の舞台は上述の通り現代とはまるで関係ない世界なのに、文化やキャラクターの思考が現代と近いこと、そこに違和感を感じさせないのは小川一水の十八番的なところでもあるが、この一冊もまさしくその通り。 それでいて、単に愛着の沸くキャラクターというだけではなく、姓の問題、家長制、氏族制といった現代の問題も孕みつつ、ともすれば暗い気持ちになりそうな設定を見せつつ、それでも強く明るく生きるキャラクター達に元気をもらえるような読みごたえは流石といったところ。 ファンなら安心して読める、間違いない一冊でした。 その他 いつもの中編1冊ではあるけど、中盤から終盤にかけてはやや急ぎ足で、残りページ数に対して書きたいことをものすごい勢いで「詰め込んだ」ようなストーリー展開なのはちょっともったいなかった気がした。 プロットの時点で盛り込むことを決めていた内容を、ページ数にあわせて詰め込んでいったらこうなっちゃいましたという感じがして、どうせならもう1.3倍ぐらいに膨らまして、増えすぎない程度にもう少し冗長な描写があってもよかったなぁと感じた。 上記もあり、ラストはやや尻切れトンボにも感じた。 余韻をあまり残さない、キレのいい終わりかただったかもだけど、個人的には「もう少し」楽しみたかったとも感じた。 というわけで、いつものサクッと読めるたいへん痛快な小川一水でした。 ちょびーっとオタク？サブカル？っぽいキャラ描写に抵抗なければ、SFとしてもとても面白い一冊です。 他の小川一水も貼っておこう。 どれもさくっと読めて、気持ちの良い冒険と本格的なSFが楽しめる名作です。","tags":"Book","url":"posts/2020/04/29/bookreading","loc":"posts/2020/04/29/bookreading"},{"title":"\"モヤモヤ\" のメモ","text":"もやもやのメモ。 なぜこのブログでのアウトプットを始めたのか？ 仕事をしてて、思うことがある やり方とか、進め方とか、考え方とか ニュースやSNSを見てて、思うところがある そういうときに、「思うこと」をうまく文章できないことがよくある。 なので、そういうときに理路整然とした文章を書いたり、発言をしたり、ようするに筋道の通った考え方とそのアウトプットをできるようになりたい。 もやもやと思うことはあっても、それをうまく出力できず、理解が得られないことがよくあるので、ちゃんと理解が得られるようにアウトプットする能力が欲しい。 そのためにはまず「アウトプットすること」をするべき。 で、アウトプットされた文章を見て、自分で見返す。洗練されていないことがよくわかる。どうすれば洗練されるのかを再び考えるということを繰り返す。そういう訓練がしたい。 なので、「なんでもいいから」アウトプットする場所、そしてできればあまり人に見られない場所にしたかった（つまりここにアウトプットされているものは、「洗練されていない」文章になる）ので、こうやって個人ブログを立てている。 人に見られてない場所が良いなら、それこそPCのローカルに置いておけばよいじゃんという話だが、それだと緊張感が足りなさすぎるというか、続かない?モチベーションが続かなさそうだったから、「基本的には見られないけど」「見られる可能性はある」ので、継続して、訓練して、より質の高いアウトプットをできるようになりたいということで、一般的なブログサービスを使わず、どこからもリンクされない個人ブログにした、という背景。 この説明も下手で、これを、読んだ人に「なるほどね」と思わせるように丁寧に書き直したい。","tags":"Misc","url":"posts/2020/04/29/moyamoya","loc":"posts/2020/04/29/moyamoya"},{"title":"どうなれば \"日常\" に戻れるのか？","text":"日本国内における緊急事態の一端の期日である 5/6 まであと1週間ほどとなった。 個人的には、このタイミングで「緊急事態宣言解除」「これまで通り出社・外出OK」となるとは考えにくいと思っているが、いずれにせよそうなる必要はある。 その時、「どうなってればよいのか」を考えてみた。 何にせよ、指標がいる 例えば、以下のような指標がいる。 この中には、当然現時点で存在するものも含まれるが。 感染者数に関する指標 当日の検査数 当日の新規陽性者数 当日の完治数 ※医療リソースにも関わる 当日の死者数 ※医療リソースにも関わる 自治体、日本全体での累積検査数と割合 現在の検査可能数と検査数の割合（検査能力のリソース） 医療資源に関する指標 受け入れ可能な空き病床数 利用中の病床数 医療リソースの利用率 ニュースを見ていると、「今日の新規陽性者数は～～」という数字はちょくちょくでてくるが、ここには「全体の検査数」や、「検査中の何件が陽性」という割合はなかなかでてこない。これは公開されてる情報で調べたらわかりそうだけども。 最悪の事態を想定する ここで考える「最悪の事態」は、 新規感染者数の増大が止まらず、医療リソースのキャパシティの限界を超え、新規患者を受け入れること、治療することができなくなること 必要な人に、人工呼吸器といった機器を与えることができず、致死率が跳ね上がること 医療現場での感染拡大や、政府中枢といった箇所で感染が蔓延し、医療体制、および国家体制が危機に瀕すること 医療リソースの崩壊は既にニューヨークやイタリア等で起きている状態。 この中でさらに自治体や政府中枢、霞が関といった箇所で感染拡大が起きたら日本は国としての機能を消失することになる。 これが「最悪の事態」とこの記事では定義する。 もっとも、感染症による国家の危機までいかなくても、医療崩壊でたくさんの人がなくなれば労働力を失い、後退調子の日本経済の悪化を招くことも予測される。 これも緩やかな国家の死への道だとは思う。 閾値 上記のような情報に対して、これまで通りの社会活動の再開に関しては 今後の新規患者数増があっても、医療リソースが限界を迎えないこと が、端的に言える絶対条件だと思う。 これを細分化すると、 検査リソースが十分にあり、一定数の感染数増大があっても十分に検査を行える 新規陽性数が一定数の増加があっても、医療リソース的に十分に受け入れられる ここでいう医療リソースには、「軽症患者を宿泊施設に受け入れる」といった対応も含まれる。 ようするに、新たな患者がたくさんでてきても医療体制がバッチリで致死率を一定の閾値以下に抑えらえること、必要な人に人工呼吸器といった機器が割り与えられるだけの状態が揃っていることが最低条件。 上記の状態であれば、ゆるやかに感染者数が増え続けても極端に死者が増えることがあっても、8割は軽傷、致命的になるのは基礎疾患のある人だけであれば、極端な大量死や政府機能の消失は免れられる。 新規感染のリスクがあっても、それでも経済活動を再開するためにはこれは必要 ワクチンや抗体検査の確立など ワクチンや抗体検査手法の確立、革新的な特効薬があれば、この指標における「医療リソース」のキャパシティを格段に引き上げることができる。 ※一人当たりの 感染 → 検査 → 完治 までの対応コストを下げられる これも計算に組み入れて上記のような指標でグラフ化し、この数字がこうなったら再開できるというのを出してほしいというのは求めすぎなのかなー。","tags":"Social","url":"posts/2020/04/28/covid19_20200428","loc":"posts/2020/04/28/covid19_20200428"},{"title":"AtCoder 茶色になりました","text":"というわけで改めて。 昨日の ABC164 で、ようやく灰から茶に上がれました。 発参加から約4ヶ月。unratedなどもあったけど、最初に考えたより時間かかってしまったが、ようやく。 改めて、自分のバックグラウンドなど 情報系の大学院卒、修士（この背景でこの程度のプログラミング能力、アルゴリズム能力なのがほんと悲しい） ITインフラエンジニアとして働きはじめて6年目 学生時代はあんまり真面目じゃなくて、なんとなく流れで情報系には来たものの計算機工学も情報通信工学もあんまり興味なかった。 ただなんとなく選択して、なんとなく就職から逃げてMまでいったけど、そんなスタンスのDはほんと無理だろうな（というかDにいくモチベーションもないな）と思い、就職。 興味はたいしてないけど別に嫌いではなかったし、運よく好きなゲームの会社へ就職できたこともあり、入社してからITインフラの運用とかの勉強を始めて今に至る。 あくまでインフラの設計や構築、運用がメインの業務なので、プログラミングやアルゴリズムはほとんど使わなくて、それよりも各種ツールの使い方やオンラインゲームやWEBサービス用のサーバの設計思想とかアーキテクチャ、プログラマとのコミュニケーション、あるいはそれを非技術者へ説明する能力が求められる環境で日々業務をしていく中でどんどん困っていったのが、 \"プログラミングが分からない\" ということ。 自分でいうのもなんだけど要領はいいほうなので、概念をざっくり理解してそれっぽく理解してる風に振る舞うことはできるんだけど、いい加減そういう姿勢で仕事をしてるのがつらい（ガチで詳しい人に当たったときになんも言えなくなる）自分に嫌気がさして、まともにプログラミング、アルゴリズム能力を身に着けようと思ったのが競技プログラミングを始めたきっかけ。 もともと、「何か一つまともに書ける言語を身に着けよう」で、インタプリタで綺麗に書けて動かしやすくて、かつ業務であるインフラ運用にも直結する python を選択したけど、勉強には続ける動機が必要で、競技プログラミングはその一助のつもりだったけど、やり始めたら思ったより楽しいなってなってるところ。 勉強そのものはそんなに嫌いじゃない、興味がないだけで。 楽しいと思えて、勉強したり練習したりして、ちょっとずつできるようになってく過程は（誰でもそうだろうけど）楽しいし好きなので、競技プログラミングもこの調子で続けて成長していきたいと思える趣味ができたという感じ。 4ヶ月ほど継続して、どういう能力が必要で、どういうものを勉強したらよいのかだいぶ見えてきたので、まだしばらく継続して続けたいな。 ついでに、paizaのレーティング。最近サボリぎみ。 paiza は、C問題までは雰囲気実装でできたけど、Bになると途端に「アルゴリズム力」が要求される。 アルゴリズム力が皆無だった自分には今はまだはえーなコレと思い、いったんC止まりにしてるけど、もうちょいしたらこれもまたB以上に挑戦したい。 しばらくやってみてわかったことは、競技プログラミング能力を伸ばすには 単純な実装能力 プログラムそのものの基本的な書き方 標準ライブラリの使い方 アルゴリズム能力 アルゴリズムの知識と実装の仕方 問題文からどういうアルゴリズムを使えば解けるかの読解力 数学力 中学以上の基礎的な数学力（一次方程式から始まり、高校数学1A2B3C、および大学数学の教養レベルぐらいまで） 問題文からどういう風に処理したら解を求められるかの読解力 がそれぞれ要求されている、ということ。 高校数学もそれなりに勉強していたけど、10年以上ぶりになるとさすがになんだっけ・・・てなるね。 久々にΣを見た時に、Σだ・・・とだいぶ固まってしまったので、時間見つけてまた高校数学も復習したいと思う。 目下、今後の目標は上記3つのそれぞれをちょっとずつ伸ばしつつ、 AtCoder は 茶の上位を目指す Cを安定してクリアし、内容によってはDも解けるようになる paizaは、Bに挑戦してクリアする そのためには、基礎的な競プロに必要なアルゴリズムを学んでいく必要がある。 幸い、最近はAtCoderが流行ってるおかげか入門記事もたくさんあり、教材には事欠かないのがありがたい。そのうち蟻本とかも買おうかな。 一番大きなモチベーションは、これから生まれる我が子に対して「勉強する習慣」を共有できるようにしたい、ということ。 子どもに対して「勉強しろ」というのではなく、親が当たり前に勉強してる姿勢を見せることで、言われずともいっしょに勉強するような関係にしていきたいというのが自分の願望でもある。 【子は親の言うように育つのではなく、親のするように育つ】というのは、きっとほんとにそうだと思う。 「勉強しろ」ってガミガミいうくせに、自分はぜんぜんしてないじゃんってのは、子どもが自我をもって（思春期ぐらいになって？）最初に感じる理不尽だなと思っているので、子どもの前では積極的に勉強している親でありたい。 そういう、自分のささやかな願望の話でした。","tags":"Tech","url":"posts/2020/04/27/atcoder_20200427","loc":"posts/2020/04/27/atcoder_20200427"},{"title":"AmazonLinux2 に GO をインストールする","text":"環境 OS NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) Kernel Linux mailserver 4.14.173-137.229.amzn2.x86_64 #1 SMP Wed Apr 1 18:06:08 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 手順 事前準備 インストール 有効化 確認 事前準備 AmazonLinuxなので、 amazon-linux-extras を使う。 amazon-linux-extrasを使えることと、extrasにgolangがあることを確認する。 # which amazon - linux - extras / usr / bin / amazon - linux - extras # amazon - linux - extras | grep golang NOTE : The livepatch extra is in public preview , not meant for production use 29 golang1 . 11 available \\ → glang1.11 が使える模様。golangそのものには拘りないので、入れられるものでOK。 インストール # amazon-linux-extras install golang1.11 → インストールされる 有効化 GOPATHを設定する # echo \"##GOPATH\" >>.bashrc # echo \"export GOPATH=$HOME/.go\" >>.bashrc 確認 # go version go version go1 .13.4 linux / amd64 # echo $ GOPATH / root / . go 参考 Amazon Linux Extras → Amazon Linux Extras golang","tags":"Tech","url":"posts/2020/04/27/install_golang","loc":"posts/2020/04/27/install_golang"},{"title":"AtCoder Beginner Contest 164","text":"今日もCまでの3完。でもCも明らかに灰diffだったので、茶パフォは難しそう。。 A - Sheep and Wolves 入力値の大小を比較して、答えを出力すればよい。 = の条件を間違えて、1WAしてしまった。。 B - Battle Aとほとんど同じロジックでとける。 体力が0になるまでにかかるターン数は切り上げの割り算で求められる。 必ず高橋くんが先行のため、= のときは高橋くんの勝利と見なせばよい。 C - gacha リストの要素数を数えるだけ。 各言語で「リストの要素数の数え方」を知ってればそれで終わり。python なら set を使う。 たぶん、この知識の部分でC扱いなのかな？と思ったけど、難易度は明らかに灰diff。。 D - Multiple of 2019 Cまでぱぱっと解けたので、今日はDまでいけるのでは！と挑んだが見事に撃沈。 終盤にTL見てたら、青diffとか水diffとか言ってる人もいたので、自分にはまだ早かった。 まずは、愚直な方法でO(N**2)の実装でTLE。 でも答えはこれで求められるとは思う。 1 2 3 4 5 6 7 8 9 10 #!/usr/bin/env python3 # -*- coding: utf-8 -*- S = input () c = 0 for i in range ( 0 , len ( S ) - 3 ): for j in range ( i + 4 , len ( S ) + 1 ): s = S [ i : j ] if int ( s ) % 2019 == 0 : c += 1 print ( c ) 次に考えたのが、2019の倍数を作って文字列マッチする手法。 2019から、文字列として見た時に \"0\" を含まない2019の倍数の文字列の一覧を、len(S)と同じ桁数のものを作って、S.count(s) とする手法。 この方法なら文字列一致のためのループが不必要になるので高速化できるかと思ったけど、 そもそも len(S) の桁数までの2019の倍数を作るのだけでTLE（ここを全部書き出しておけたらあるいは・・・？） countの仕様で、S=181718171, s=18171 に対して S.count(s) とすると 1 になることがわかった。これは学びだが、今回のケースではこれを 2 としてほしいので使えなかった Collections.Counter を使えばどうにかならないかと思ったけどこれもだめだった 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #!/usr/bin/env python3 # -*- coding: utf-8 -*- S = input () c = 0 x = 0 for x in range ( len ( S ) * 10 ): s = str ( 2019 * x ) # print (s) if s in S : # print (2019*i,S.count(str(2019*i))) # c += S.count(str(2019*i)) for i in range ( 0 , len ( S ) - 3 ): for j in range ( i + 4 , len ( S ) + 1 ): t = S [ i : j ] if t == s : c += 1 print ( c ) 提出のときは、 S.count が意図通りに数えてくれないことがわかったので、「文字列一致で S に存在する 2019の倍数 s があったら、i,j の2重ループで数える」というややこしい形になった。TLE。 最後に、正しいかどうかはわからないけどこうすればいけるんじゃないか案として、 数字の文字列Sを先頭から確認していき、 1<=i<=j<=len(S) で int(s[i:j])%2019 == 0 となる i,j を発見できたら、それ以降の s[i::] に解を満たすjは存在しないと仮定した実装（たぶんこれは正しくないし、TLEは減ったがWAした） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #!/usr/bin/env python3 # -*- coding: utf-8 -*- S = input () c = 0 i = 0 while i < len ( S ): # print (i) for j in range ( i + 4 , len ( S ) + 1 ): s = S [ i : j ] if int ( s ) % 2019 == 0 : # print (i,j,s) c += 1 i = j - 1 break else : i += 1 print ( c ) なんか、解説読んだら「実はこれで解けます」みたいな雰囲気でそうだったのかよ！って思いそうだなーと思いながら提出したけど、これもTLE&WA。 本日はここで試合終了。というかこの結局できなかったDで1時間半つかった。。 なお、解説見てもさくっと理解できなかったし、数学的考察もアルゴリズム力も全然今の自分より必要な問題だったため、いずれにせよ解けない問題でした。。 D問題、writerさんの解説 アライグマ「D問題は、ABC158Eの下位互換なのだ。Sのi文字目以降を2019で割ったあまりが等しい組の個数を求めればいいのだ！ E問題は、(今いる都市,銀貨の枚数)を頂点にしてダイクストラをすればいいのだ！ 銀貨は2500枚くらいしかいらないから頂点数が増えすぎなくて解けるのだ！」 pic.twitter.com/kJmTEBJKMp — 競技プログラミングをするフレンズ (@kyopro_friends) April 26, 2020 わからんので、また考えてみる。。 レート更新結果、茶にはあがれました！！よかったーようやく。。 たぶんまたしばらく茶でうろうろするだろうけど、少しずつ勉強していこう。","tags":"Tech","url":"posts/2020/04/26/abc164","loc":"posts/2020/04/26/abc164"},{"title":"雑記 20200426","text":"このサイトのPelicanのテーマを変更したり、いろいろ調整したりなど。 タグに日本語を正しく指定できるようにして、theme や plugin をちゃんど submodule として取り込んでみたり。 そもそも git submodule という概念を知らなかったので調べて理解した。 このブログページに関するTodo: サイドメニューをもう少し充実させる favicon 設置する コードブロックの表示において、1行目が特殊なブロックになってしまう コードブロックの表示において、非コードな文字列をいれると syntax error と判断されて、err の装飾がついてしまう → これ自体は正しい挙動なんだけど、コードブロックで例えば実行するコマンドを書いた場合などに、気に食わない感じになる。のをどうにかする。 <正しくコードが表示される> ※ただし1行目のインラインブロック？は気に食わない 1 2 3 4 5 #!/bin/bash set -euC echo \"Hello!\" exit 0 スクショ: <エラー表示になる> # command1 # command2 arg1 → コードブロックに表記させるものとしては正しくないのは間違いないので、そもそもこういうものをコードブロックに入れないほうがよいのかな。考える。 スクショ: 引き続き引きこもり生活。もともとこの生活に入ったタイミングから買い物は数日に1回程度で、継続ってかんじ。 引きこもり体質なので、ぜんぜん苦じゃない。 GW開けても、緊急事態宣言の如何に関わらずリモートで仕事していたい。 金曜日に、 Infra Study Meetup #1「Infrastructure as Code」 を聴講した。 配信に関してはちょっとトラブルがあったけど内容はたいへんよかった。 自分のチームはサービス用のインフラは全部オンプレで、手順書ベースだったOSブート後の設定が今は（それも大分前だけど） puppet 管理になっている。 とはいえ、全部が全部IaCできてるわけではなくて、 \"スノーフレークサーバ\" もそこかしこ（むしろ全体がスノーフレークと言ったほうがよいのかも。。）にあり、管理運用には大分疲弊しているところ。。 そもそもの物理機器の設置、設置後のOSブートはセグメント内の Cobblerサーバを使った PXEBoot なので、その時点で IaC がそもそも遠いのかも（むしろこれもIaCの一部？）だけど。 転職したい！！ 妻がマスクを手作りしてくれている。大変ありがてぇ。使い捨てのサージカルマスクはもうほとんど家の在庫はなくて、必要な時に備えてできるだけ使わないようにしてる。近所のちょっとした外出は自作マスク&政府支給マスク。 政府支給マスクは無事届いたし、別に汚れてもないしカビてもなかった。まとも(?)な布マスクだったので普通に使ってる。 東京の感染者数（公表数）は爆発的な増加はしていないように見えるけど、結局検査数も増えてないので潜在的な市中感染者数は不明。 というか、かなり広がっているんだろうな。たとえGWで緊急事態宣言が明けたとしても（明けないと信じてるけど）、引き続き気を緩めず、気を付けていこうと思う。","tags":"miscellaneous notes","url":"posts/2020/04/26/miscellaneous_notes_20200426","loc":"posts/2020/04/26/miscellaneous_notes_20200426"},{"title":"AmazonLinux2 に pipenv/pyenv をインストールして python3.8を使えるようにする","text":"CentOSやCentOSのfork(?)のAmazonLinuxでは、OSのパッケージ管理に使ってる yum/dnf コマンドが OSインストールの python を使っている都合上、気軽にOS上のpythonを変更できない。そのためOSのpythonとは別に隔離環境でpythonの実行環境を用意する必要がある。 この記事では、pyenv を使って pipenv を用意する手順について記載する。 pipenv に拘らなければ、 pyenv だけでも良いと思う。 環境 OS # cat /etc/redhat-release NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) Kernel # uname -r Linux mailserver 4.14.173-137.229.amzn2.x86_64 #1 SMP Wed Apr 1 18:06:08 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux デフォルトの python $ python --version Python 2.7.16 AmazonLinux2 構築直後で、 python3, pip はインストールされてない状態。 手順 依存パッケージを事前用意 pyenv をインストール pyenv を使い、python3、pipを使えるようにする pip で pipenv をインストール pipenv を使い、使いたいpython3のenvを構築する 確認 依存パッケージを事前用意 # パッケージインストール $ sudo yum install gcc zlib-devel bzip2 bzip2-devel readline readline-devel sqlite sqlite-devel openssl openssl-devel git libffi-devel pyenv をインストール, pip を使えるようにする pyenv 手順 # bash commands $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv $ echo 'export PYENV_ROOT=\" $HOME /.pyenv\"' >> ~/.bash_profile $ echo 'export PATH=\" $PYENV_ROOT /bin: $PATH \"' >> ~/.bash_profile $ echo -e 'if command -v pyenv 1>/dev/null 2> &1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bash_profile $ exec \" $SHELL \" → pyenv が使えるようになる $ pyenv install --list → インストール可能なpython一覧 $ pyenv install 3.7.7 → ユーザローカルで使う用の python 3.7.7 をインストール。ソースのDLとビルドでしばらくかかる。 $ pyenv local 3.7.7 $ pyenv rehash $ python --version → Python 3.7.7 $ which pip → ${ HOME } /.pyenv/shims/pip $ pip install --upgrade pip $ pip list → pip, setuptools のみになっていることを確認 pip で pipenv をインストール # bash commands $ pip install pipenv $ pip list → pipenv と依存するモジュールがインストールされていることを確認 pipenv を使い、使いたいpython3のenvを構築する pypa/pipenv pipenvを使うディレクトリを作成 # bash commands $ mkdir pipenv3.8.2 $ cd pipenv3.8.2 $ pipenv --python 3 .8.2 → pyenvを使い、Python 3 .8.2 のビルドが行われる → インストールが完了したら、 Pipfile が作成される pipenv に、pipモジュールをインストール # bash commands $ pipenv install numpy scipy → Pipfile.lock が作成される pipenv を使い、仮想環境へ入る # bash commands $ pipenv shell Launching subshell in virtual environment… . /root/.local/share/virtualenvs/pipenv3.8.2-J6FbHgp9/bin/activate $ which python /root/.local/share/virtualenvs/pipenv3.8.2-J6FbHgp9/bin/python $ python --version Python 3 .8.2 $ pip list Package Version ---------- ------- numpy 1 .18.3 pip 20 .0.2 scipy 1 .4.1 setuptools 46 .1.3 wheel 0 .34.2 $ deactivate → 仮想環境からログアウトする 以上で pyenv, pipenv を用いた python のビルド環境、仮想環境の構築ができた。 このpipenv環境は、Pipfile, Pipfile.lock を共有すればすぐに再現できるため、環境の再現にも便利に使える。","tags":"Tech","url":"posts/2020/04/26/pipenv","loc":"posts/2020/04/26/pipenv"},{"title":"自前メールサーバの構築手順メモ","text":"EC2で運用してる自前メールサーバ(受信＆転送専用)の構築手順のメモ https://github.com/mollinaca/til/blob/master/mail_server/メールサーバ構築メモ.md メールサーバ構築 用途、前提 自前ドメインのメール受信用SMTPサーバの構築 自前ドメインで受けたメールを、専用のgmailへ転送する 上記以外に、GIPを持ってるサーバとしてちょこちょこ利用する なるべく AWS FreeTrial の範囲で 1年ごとの使い捨て EC2インスタンスを作成 AWSアカウントを作成 アカウント作成 2FA設定 ログイン・作業用IAM、API実行用IAM作成 作業用IAM: EC2, S3, へのフルアクセス権限 作業用IAMでログイン EC2インスタンス作成 AmazonLinux2 SecurityGroup作成、アタッチ inbound: sshログイン用ポート, smtp/25 を解法 outbound: ICMP(IPv4), カスタムTCP/587 を解放 EIPアタッチ EC2へsshログイン EC2での作業 インスタンス初期設定 ## bash commands # Login & passwd change $ sudo su - $ passwd root → rootのパスワード変更 # Package update $ yum update $ yum upgrade # Disable SELinux $ getenforce → Disabled ならOK # modify sshd config $ cd /etc/ssh $ cp -pi sshd_config sshd_config.org $ vi sshd_config ※内容 → https://github.com/mollinaca/dotfiles/blob/master/sshd/sshd_config_ec2 # create login user $ groupadd hstn $ passwd hstn → passwd 設定 $ visudo → hstn に sudo 権限を付与 --- hstn ALL =( ALL ) NOPASSWD: ALL --- → hstn で sudo できることを確認 # login user setting $ su - hstn $ mkdir .ssh $ chmod 755 .ssh $ cd .ssh ※ログイン用公開鍵を設定 ※ログイン確認 $ exit # login as operation user $ ssh hstn@ [ host ] $ sudo su - # delete eu2-user $ userdel -r ec2-user ## other settings # change hostname $ hostnamectl set-hostname mailserver # modify TZ $ timedatectl set-timezone Asia/Tokyo # reboot $ reboot → ログインして反映を確認 # modify prompt for operation user and root $ su - hstn ※よしなに変更 # install tools $ yum install git ※ほかに必要なものがあればインストール メールサーバ設定 ## bash commands # modify /etc/hosts $ vi /etc/hosts → 127 .0.0.1 の行に mail.watarinohibi.tokyo を追加 # install sasl $ yum -y install cyrus-sasl-plain cyrus-sasl-md5 # modify postfix and sasl conf $ cd /etc/postfix $ mv main.cf main.cf.org $ vi main.cf ※内容は → https://github.com/mollinaca/dotfiles/blob/master/postfix/main.cf $ vi /etc/postfix/smtp-auth-passwd ※内容は → https://github.com/mollinaca/dotfiles/blob/master/postfix/smtp-auth-passwd $ postmap /etc/postfix/smtp-auth-passwd $ rm -f /etc/postfix/smtp-auth-passwd # postfix alias settings $ vi aliases ※内容は → https://github.com/mollinaca/dotfiles/blob/master/postfix/aliases $ newaliases # restart postfix $ systemctl restart postfix DNS設定 zoneに以下のレコードを登録 # add below records to my DNS ZONE mail.watarinohibi.tokyo IN A [EIP] mail.watarinohibi.tokyo IN MX 10 mail.watarinohibi.tokyo メール送受信テスト ## bash commands # ローカルから送信 $ sendmail test@mail.watarinohibi.tokyo From:root@mailserver To:test@mail.watarinohibi.tokyo Subject:test mail sending test . → メールが届くこと、メールログを確認 # 外部から送信 → メールが届くこと、メールログを確認 監視設定 CloudWatch TBD maillog TBD securelog TBD その他 NACLの上限緩和申請","tags":"Tech","url":"posts/2020/04/25/mailserver","loc":"posts/2020/04/25/mailserver"},{"title":"真実と事実","text":"FACTFULLNESS はとてもよい読書体験だった。 以下に自分の「なんとなく」の理解が事実と異なってるか、思い込みによる誤解が多いのかを知るきっかけになった。 世の中には、事実（FACT）とは異なる情報が多く流れる。フェイクニュースというやつだ。 フェイクニュースに騙されないようにするためには大きく 情報を疑ってかかる（事実かどうかわからないものは、少なくとも出典や原典を当たる） 正しい知識を持つ の二つが考えられると思う。 少なくとも、正しい知識があれば2択クイズでチンパンジーに負けることはそうそうなくなる、はず、と信じたい。 とはいえ、これはとても難しい。 SNSに溢れる情報はだいたい断片的 なんとなくリツイートされる、シェアされる耳障りのよい情報は大抵断片的だ。 出典がなければ、誰が言ったのかも不明瞭だったりするし、それ自体がフェイクだったりもする。 もはや、出典が確実な情報でなければ迂闊にシェアもしないほうが良いとまで思っている。脊髄反射で拡散してはいけない。 また、情報が正しいかどうかもわからない。拡散している人も、正しいと思って拡散していることがほとんどだからだし、そもそも原典の時点でだって誤ってる可能性もある。 でもこれはSNSだけの問題じゃない 上記のように考えながら注意深くSNSを観察しながら、テレビのニュースや新聞をほとんど読まなくなって10年近くった。 いまもテレビは持ってないのでテレビでニュースを見ることはないけど、昨今、Youtube等でニュース番組の配信はちょいちょい見てる。 すると、まるでフェイクのような情報の多いこと。 フェイクではなくても、切り抜きや印象操作のようなものも多い。 というようなことを感じている。 テレビで放映できる時間は決まってるから、大事なことを、必要なことを端的にまとめて伝えるのはテレビニュースにおいて最も重要なスキルの一つであると思うけど、とはいえそれは抜き出しすぎではありませんかというのがちらほら。 真実と事実 結局のところ、私たちが普段入手できる情報というのは、大抵誰かの伝聞で、その情報は誰かのフィルタにかけられ、脚色され、そしてもともと必要な情報は欠落している。 令和の時代になり、インターネット、情報化社会がこれだけ発達しても、正しい情報が伝わるなんてことはなくて、情報量が増えたのとあわせてデマやフェイクも増えただけだったというのが現代のオチなんだろう。 そんな中にも、間違いなく、真実や事実はある。 大事なのは、その真実や事実を注意深く拾い上げることだと思う。 covid19における「真実」と「事実」 とりあえず、きっと以下の内容は真実だし、事実だと思う。 日本、東京において 検査能力も、医療リソースもまったく足りていない 街中にはたくさんの無症状感染者がいて、いつ自分がそういう人とすれ違って、感染してもおかしくない 外出自粛要請は、結局目標の8割には達していない。 なんなら、地方では地元の商店街が大変賑わっているようだ。 それでも、感染拡大の危険はもう目の前に迫っている。 あまりにも自覚がない人が多いみたいで、不思議でしかないが、きっとこれからも感染者はじわじわと増え続け、死者はどんどん増えていき、病床は埋まっていき（とはいえ、ホテル等での無症状者向けベッド確保はそれなりの数を達成できたみたいだ、これはすごいと思う。関係している宿泊業者の皆様には感謝感謝だ。）、緊急搬送は遅れていくだろう。 既に受け入れができなくなった病院もでてきており、感染拡大が止まらなければこの傾向はいっそう拡大していくと同時に、人々の接触が減らなければいつまでたっても状況が好転することはない。 ある意味で、最悪のシナリオに突入しているように感じる。 思い切ったロックダウンができないけれども、多くの人がストレスを抱えるにも関わらず効果を発揮できない「強力な自粛要請」の状態が続き、 そしてそれはいつまでも終了できない。経済にも長期的なダメージを与えるやり方だ。 それでいて、医療の現場や、リーダーシップのとれない政治家たちに文句を言い続ける。いったいなんでこんなことになってしまったんだろう。 日本人的な、なんとなくわかっててもダラダラと止められない悪癖が、自分たちを蝕んでいってるように感じる。 GW開けの緊急事態宣言終了なんて夢の夢だ。 状況はきっと何も変わってないし、改善もしない。 それでも、なんとなく「GW開けたらいいんでしょ」みたいな人たちが街に出ていき、そしてそこで感染の拡大が起こる。 これを防ぐには、少なくともGW突入前には、「緊急事態宣言の延長」を表明してほしい。 と同時に、何の数字がどうなったら解消できるのかをはっきりさせてほしいとも思う。 緊急事態宣言の解除（経済活動の暫定再開）のためには、「新規感染者数が減少傾向」、「医療リソースの一定の余剰」 自粛要請の解除（経済活動の本格再開）のためには、「新規感染者数が一定数、割合以下」、「医療リソースのさらなる余剰」「ワクチンや画期的な治療法、予防法の確率」および、「人口のX%に対して抗体検査を実施し、Y%以上が抗体を所持すること」 といった指標が必要なんじゃないかな。 単なる感染者数だけでなく、こういった指標を出して、そして数字を出してほしい。 つまり、状況改善の指標になるKPIが必要なんだよな。 なんとなくの雰囲気でしか喋らないから、いつまで我慢したらいいのかわからない、という状況なんだなとこれを書きながら思っている。 データドリブンな仕組みが望ましい。 ただし、そのデータは、少なくとも観測範囲では真実であり事実であることもあわせて。 KPI改善で、「誤ったKPIの設定」「誤ったデータの観測」は命取り。","tags":"Social","url":"posts/2020/04/21/truth_and_fact","loc":"posts/2020/04/21/truth_and_fact"},{"title":"After covid-19 Thought experiment","text":"covid-19 が落ち着いた世界はどうなっているんだろう？ 今現在世界中で猛威を振るっている covid-19。 国や地域によってはピークはいったん過ぎつつあるところもあるけど、そのあと再度流行の第2波、第3波がくることも予想されている。 それでも、人類が絶滅しなければいつかはワクチンの開発や免疫の獲得によって今ほどの脅威ではなくなるはず。 その時、いまと何がどう変わっているんだろう。 感染症の恐怖とこれまでなんでもなかった行動における「リスク」の高まり 最初に中国の特定の地域、場所で発生した（とされる）今回の covid-19 は、なにやら大変なことが始まったぞと見ているほんの数日～数週間の間に爆発的に世界に広がった。 今日、世界で人類にいけないところはほぼないぐらい地球上の全ての場所で人類の往来があるし、たくさんのトラフィックが流れている。 人の移動にくっついて感染者数を増やす感染症事態のリスクが100年前のスペイン風邪の時と比べて圧倒的に高まっているのは間違いない。 いまや、市井のどの人が感染症のキャリアかわからなくなった状態になっているわけで、この状態では圧倒的に人と会うリスクが高いと考えられるし今後もこの傾向は続くだろう。 これまで気軽にオフィスや会議室で集まっていワークしていたことのハードルが一層高くなった状態だ。 WFH、リモートワークの需要が高まったのではなく、集まることのリスクが高くなった。それが今は計測不能なため緊急事態宣言になっているが、状況が落ち着いてもこの「リスクが高くなった」ことには変わりない。 もともと世界にはWFHに価値を見出して最初からオフィスを持たない企業も存在する。 WFHには、新たなリスク回避のメリットが加わったことから今後意図的に「オフィスを持たない」選択をする企業はでてくるだろう。 とはいえ、オフィスや会議室に集まること、F2Fで会話することにはそれ自体に価値があるし、自宅に業務環境、集中するスペースを設けるのが難しい人もいる。 すべてがすべて WFH になるっていうことはないだろうし、バランスを取りながらオフィスを継続するところはするし、やめたり、最初からオフィスを持たない前提で企業する組織も現れるだろうとは思う。 あるいはサテライトオフィス。 WeWork のような形ではなく、コワーキングスペースで衛生面により気を使った環境の提供が流行るかも。 デリバリーの需要拡大 感染症を避けるためには、なんといっても「人と会わない」ことが重要である。 そのために、不特定多数の人がいるスーパーマーケットや小売店に出かけて行って買い物をすることは、それ自体のリスクが高まった。 Amazonが世界に出現してからECでの決済額は上がり続けているけれども、今後その需要は一層拡大していく。 日用品の配達、とくにサブスクリプションと組み合わせた生鮮食品のデリバリーとかも需要が拡大していくだろう。 既にいまあるサービスも申し込みが殺到しているらしい。わざわざ外出して不特定多数の人と出会う機会や、不特定多数の人が触った食品を手に取るリスクを冒したくないと考える人がいるのも頷ける。 学校や教育の現場でも 学校は不特定多数ではないけれども、やはり人と密集した環境で過ごすリスクファクターになった。 より一層オンラインでの対応、特に補習塾は、わざわざ塾にいかずとも、自宅でできる環境が必要になっていくだろう。 人と会うことがリスクになる時代 総じて、外出を避け、不特定多数の人と接触する機会を避けるように、社会はシフトしていくと思う。 そしてより一層オンラインが重要になる。 その時重要なのが、いかに自宅に仕事をしたり、学習をしたりする環境を整えられるか。 日本は、街中や各自宅へのインターネット普及率、またその性能は世界でもダントツで良いほうだと思うけど、一方で一般家庭へのPC普及率は諸外国と比べたら高くないし、ITリテラシーも高くないほうだと思っている。（ほんとかな？ 今後緩やかに、でも確実にオンライン化が求められる時代が進む際に、どの程度の人が社会から蹴り落されるか、そこで蹴り落されないようにどの程度のセーフティネットが設けられるか。 変革の時であることは間違いないけど、日本という国がどうやって変化に適応していくのか（あるいはできないのか）、重大な局面であると感じる。","tags":"Social","url":"posts/2020/04/20/aftercovid19","loc":"posts/2020/04/20/aftercovid19"},{"title":"AtCoder Beginner Contest 163","text":"今日はCまでできたけど、エラー多発により unrated になってしまった、また茶に上がれなかった ＞＜ 【ご報告】 ・今回のUnratedは、サーバー負荷により問題が発生し、問題文を長時間閲覧出来ないユーザが多数存在したためです。こちらは現在原因を調査中です。 ・IE(Internal Error)がジャッジ結果として表示された不具合は、現在は解決しております。こちらは負荷とは関係がありません。 — AtCoder (@atcoder) April 19, 2020 A A - Circle Pond 円の半径が与えられるので円周を出力せよという問題 題意通りに実装すればOK ちなみにpythonでは、π は math にあるので、以下のように実装すればよい import math print ( 2 * int ( input ()) * math . pi ) B B - Homework 問題文いろいろ書いてあるけど、要するに 2行目で入力される数字の和が n 以下ならば差を出力、大きければ -1 を出力、それだけ n,m = map(int,input().split()) A = list(map(int,input().split())) print (n-sum(A)) if n >= sum(A) else print (\"-1\") C C - management 1回TLEしたけど、2回目に無事ACした。よかった。 最近Cもなかなか解けなくてちょっとしょんぼりしてたけど、今日はちゃんとできた。 2行目に入力される数字の、要素ごとの要素数を出力すれば良い 1回目、TLE n = int(input()) A = list(map(int,input().split())) for i in range(1,n+1): print (A.count(i)) すべての要素に対して、毎回リストを全部精査(count)している。 そのため、len(A)の長さのリストをn回ループするので、O(n**2)) 2回目、AC n = int ( input ()) A = sorted ( list ( map ( int , input (). split ()))) d = {} for i in range ( 1 , n + 1 ) : d [ i ] = 0 for v in A : d [ v ] += 1 for v in d . values () : print ( v ) ※制約から読み取れなかったので、念のため A を受け取り時にソートしてるが、たぶん不要 リストの精査は1回で、要素ごとの和をdictに格納する。 これで、O(n)、AC 今日は18分でCまで解けた。 また次回がんばろう。","tags":"Tech","url":"posts/2020/04/19/abc163","loc":"posts/2020/04/19/abc163"},{"title":"COVID-19 in Tokyo 20200416","text":"4月7日に、7都道府県に緊急事態宣言が出されてから1週間とちょっと、間もなく2回目の週末を迎えようとしている。 そんな中、本日さらに緊急事態宣言の対象が拡大され、ついに日本全土が対象となった。 政府、緊急事態宣言の対象を全国に拡大へ 5月6日まで＝報道 4月7日の緊急事態宣言後も、各自治体が独自に緊急事態宣言を出すなど、国の方針を待てない自治体は独自の動きを始めているところもあった。 愛知県、10日に独自の「緊急事態宣言」へ 7都道府県に絞って発令された結果、市井に危機感が伝わり、対象の地域の人々が対象外の地域へ移動するなど、イタリアで起きたのと同じ最悪の動きもあったみたいだ。 中途半端な実施が、返って混乱を招いたんだろう。 戦力の逐次投入は悪手を地で行っている。 東京都のデータ。 https://stopcovid19.metro.tokyo.lg.jp/ より とはいえ、新規陽性患者数は、そこまで爆発的に増えているわけではない、みたい。 もちろんこれは、相談があり、検査を行い、結果陽性判定が出た数なので、実際に街中にどの程度感染者が潜んでいるのかは実際のところは不明だけど。 検査実施人数に至っては減少傾向。新規陽性患者数の母数になる検査件数が減ってるから、陽性数が少なくみえるのはそれはそうだろうという気はする。 検査人数、増やすのは難しくても減らしているのはなんでなんだろう。。検査機関が感染したとかそういう話でなければいいけど。 都営地下鉄の単純な利用者数は、かなり減っている模様。 このグラフだと、7割近く減っている。目標の8割までもう少しというところ。 とはいえ、これは都営地下鉄だけでJRとかは含まれないので、そちらのデータがないのはもどかしいところだけど。 渋谷や新宿のライブカメラ見てると、減ってるのはだいぶそうみたい。 これからどうなるんだろう？ まずもって、感染拡大はGW開けの5/6まで落ち着かないと思う。 緊急事態宣言&自粛要請が、一般市民の多くにそこそこ効いてると思う。 大規模な街中でのクラスター感染や、感染数の爆発的な増加というのはある程度脅威度が下がっていそう。 一方で、新規感染そのものの抑制はできない。 ある程度自粛しているだけでは結局じわじわ広がり続けるし、医療リソースはじわじわ食い続ける。 結果的に、病床もじわじわ食いつくされ、病院が受け入れられないケースや、救急が迎えに来れないケースが増えてくる。 じわじわと、医療崩壊が進み、徐々に犠牲者が増えていく。 じわじわというのがポイントで、大規模なクラスター感染や院内感染が起きないから、そこまで大きなニュースにはならないが、確実にリソースはひっ迫していき、医療が間に合わないケースが増えていく。 そして少しずつ、ぽろぽろと犠牲者が増えていく。 これはきっと1ヵ月では収まらない。 結局自粛 \"要請\" のみでは、これは防げない。 夏ぐらいまでは、この感じが進んで、いくつか院内感染やクラスターが発生しつつも、今の状態がずるずる続くんだろうな。 でもそれで済めば、たぶん御の字。ニューヨークやイタリアみたいな、（表面的な）大惨事にはきっとならない。 こういう感じで夏過ぎまで今の緊急事態宣言が続いて、そのあとぐらいから徐々に緩和しつつも、新規感染者は減らないか、むしろちょっと増えるぐらいの状況が続く。 でもそれ以上はみんな我慢できない。その時がきっと最悪の事態で、大きな第二波がきっとくる。 これでも、だいぶ楽観的な予想だと思う。 この感染状況で、中小企業の多くが経済的なダメージを受ける。 けっこうな数の倒産が発生し、職を失う、そちらを原因に命を落とす人が増える。 幸い（？）日本人なので、略奪や暴力行為といった治安の悪化（それも多少はあるだろうけど）よりも、単純に自殺者が増えそう。 covid19で命を落とす人を経済のひっ迫を苦にした自殺者が上回るとかそういう事態になって、止む無くずるずる経済活動を再開させていく流れになる。 自分にできること。 まず自分と家族（妻）、それに9末に生まれる予定の子どもを守る。 単純に、収入を失わない。幸い自分はリモートワークで完全に業務を継続、会社のほうも多少影響は受けているけど今のところ倒産といった直接的な危機には至っていない。 ある程度内部保留ちゃんと蓄えてる会社で（状況次第では「内部保留ありすぎだろ！って批判的な目にもなるけど。。」）良かったと、今は思ってる。 新型コロナウィルスに感染しない、感染させない。自粛は継続する。 ひきこもり体質でよかった。。ぜんぜん苦じゃない。 いざというときの備え、緊急セットはまた見直しておこう。防災セットも買ってあるが、改めて。 そういうことを胸に、対策と日々を過ごしていく。まだしばらくは。 全地域の皆さまへ 緊急事態宣言で変わること・変わらないこと（4/16更新版） 読んでおこう。","tags":"Social","url":"posts/2020/04/16/covid19-tokyo-20200416","loc":"posts/2020/04/16/covid19-tokyo-20200416"},{"title":"競プロ Practice 日記","text":"今日チャレンジした問題 A - Shik and Stone パッと見 dfs に見せかけて、じつはdfsだとちょっと難しくて、問題文をちゃんと正しく解釈すれば1行で解けたパターン。 パッと見であ！dfsだ！チャレンジで見たやつだ！となって意気揚々と実装してみたものの、例１、例２までは通したら例３で見事にハマった。ここで引っかかるところも含めての問題なんだなぁ。。 dfs に見せかけというのは、ようするに「右」と「下」の移動だけで左上から右下まで # を辿ってゴールにいけるか？という問題に見えたということ。 この条件で実装すると、例３は Possible だが出力例は Impossible でええ？となる。 例３は「右」と「下」の移動だけでゴールまでたどり着けるが、実はこれは題意を満たさない。 条件は 移動する過程で、駒が常に右または下に動いていた可能性があるか判定してください。 なので、 移動ルートの中で 左に移動することが可能であったならば 、答えは Impossible になる、ということ。 えー、それって答えが Possible/Impossible なのひっかけすぎない？とは思うけど。。 上記の条件なので、 dfs で解こうとした場合、ゴールにたどり着くルートを覚えておいて、途中経過で左や上にいくパターンがあったら Impossible としないといけないので、単純なdfsよりかなりしんどい、というか自分には実装できなかった。 で、どうやって解けばよいかというと、実は題意より、 「入力された # の数が、ゴールに辿り着く最短経路の数より多ければ Impposible で良い」となる。 つまり、右か下のみの移動であればかならず最短数でのゴールになるので、それ以上に # の数が多かったら Impposible でOKということ。はー、なるほど。 提出: 提出 #11925884 H , W = map ( int , input (). split ()) c = 0 for _ in range ( H ): c += input (). count ( \"#\" ) # # の数が最低限必要な数より多いと Impossibleとなる print ( \"Impossible\" ) if c > H + W - 1 else print ( \"Possible\" ) 元のマップを記憶する必要もなくて、入力中の # をカウントして題意を満たす解を出力するだけ。","tags":"Tech","url":"posts/2020/04/14/practice_2020414","loc":"posts/2020/04/14/practice_2020414"},{"title":"AtCoder Beginner Contest 162","text":"できなかった。。 ＞＜ A A - Lucky 7 入力文字列に 7 が含まれてたら Yes , なければ No 題意通り実装してAC B B - FizzBuzz Sum FizzBuzzの応用？ 1からNまでループし、3か5の因数だったらpassして、それ以外を合計する 制約が 1<=N<=10**6 のため、普通に for ループで回して終わる。 C C - Sum of gcd of Tuples (Easy) できなかった。。 問題文を読んで、まずは愚直な実装。 k = int ( input ()) import math from functools import reduce def gcd ( * numbers ): return reduce ( math . gcd , numbers ) total = 0 for a in range ( 1 , k + 1 ): for b in range ( 1 , k + 1 ): for c in range ( 1 , k + 1 ): total += gcd ( a , b , c ) print ( total ) gcd は3つ数字の gcd を取れるように、reduceを使って実装。 https://note.nkmk.me/python-gcd-lcm/ からの引用。前別の問題でgcd求めたついでに調べて知っていたのを思い出して再利用。 ただまぁ、愚直な3重ループはTLEだろうなと思ってやってみたが、案の定TLE。 ここからが、今の自分に足りてないところ。 上記の提出 O(N**3) でTLEなのは想像ついたので、アプローチとして 数学的に一般化できて、O(1)とかになる アルゴリズムに計算量を落とす余地があり O(N**2) 以下に減らせるとか を考える。 なんだか、一般化できそうな気がしたのでちょっと書き出し＆考えてみたがうまくいかず、タイムアップ。 計算量的に削減できそうなところでいえば、 abcの中に一つでも1があれば1 3つが互いに素なら1 とかでgcdの計算を省略したり、 過去やった組み合わせはなんかうまいことスキップ とかで計算回数そのものを減らしたり を考えたけど、うまく効きそうな実装を思いつかず。。 あとで解説見て復習する。 C 追記 20200413 00:00 他の人のAC回答見てたら、これで通ってた。。。 k = int ( input ()) import math total = 0 for a in range ( 1 , k + 1 ): for b in range ( 1 , k + 1 ): tmp = math . gcd ( a , b ) for c in range ( 1 , k + 1 ): total += math . gcd ( tmp , c ) print ( total ) えええ、計算量変わってない（むしろ一つの組み合わせに対して math.gcd() を2回やってるから計算量的には増えてる）けど、reduce 分削ったらこれで収まるのか。。 完全に余計なことしてただけなのが発覚、方向性は間違ってなかった。。orz えーんこんなことでレート落とすとは。。orz D D - RGB Triplets 実は今回Dも提出した。がこちらもTLE。 愚直な実装で題意は満たせるが、こちらもこんなループしてたら怒られるだろうなぁって感じ。 N = int ( input ()) S = input () c = 0 for i in range ( N - 2 ) : for j in range ( i , N - 1 ) : for k in range ( j , N ) : if j - i == k - j : pass else : if S [ i ] != S [ j ] : if S [ j ] != S [ k ] : if S [ k ] != S [ i ] : c += 1 print ( c ) 自分の提出とは関係ない話 言語アップデートとジャッジシステムのトラブル 開始5分以降？ぐらいで新ジャッジシステムのトラブルで、WJが進まず。 じつはこれが起きる前にCを初回提出してたので、通ったのか通らなかったのかわからなかった。 題意は満たせてるからいったん通ったつもりでD移行と思ってDも書いて提出したけど、その後も解決せずいったん離席。 unrated かなーと思って戻ってきたら問題解消してどっちもTLEとなってたのでそこからCに再トライ、敗北 PCが逝ってしまわれた... 普段つかってるデスクトップPCが死んだため、急遽会社のノートPCに環境構築して対応。 幸い docker か pipenv が動けば AtCoder 用 python 環境が動くようになってたため間に合ったけど、実は今回から3.8.2 へアップデートされていて、そこには対応しておらずあわてて事前準備。 なんとか間に合ったものの、なんだかこのノートPCでのWSLがめちゃめちゃもっさりしてて、普通のlsにも数秒かかるような状況で、実行したときに時間かかってるのがプログラムのせいなのかなんなのかわからない事態に。。 まぁ問題解けなかったたこととは関係ないんだけど。 2完なので、茶は無理だったろうな。。","tags":"Tech","url":"posts/2020/04/12/abc162","loc":"posts/2020/04/12/abc162"},{"title":"Windows10 の VirtualBox に CentOS8 をインストールして使う (1)","text":"概要 Windows10にVirtualBoxを用意 CentOS8の イメージDVD.iso を用意 VirtualBox に Linux の VirtualMachine を用意 用意した Virtualmachie に CentOS8 をインストールして起動 Windows10 に VirtualBox を用意 Oracle VM VirtualBox からダウンロード。 20200412現在、latest は 6.1.4 ダウンロードした exe を実行してインストールする。 CentOS8 のイメージを用意 Download CentOS から CentOS Linux DVD ISO をダウンロード。 20200412現在、latest は 8.1.1911 ダウンロードした .iso をわかりやすいところへ置いておく。 VirtualBox に Linux の VirtualMachine を用意 VirtualBox を起動して 仮想マシン → 新規 で新規作成する。 タイプ: Linux バージョン: Red Hat (64-bit) メモリサイズはお好みだが、CentOS8は必須2GB以上、推奨4GB以上となっているので4GB以上を指定するのが良い。 ディスクは必要に応じて作成。OSは約6.6GBほどらしい。最低で12GB程度あれば良いが、使いたければ適当に大きめに用意する。 合わせて、以下を実行できるようにネットワークの設定をしておく。 (1) ホストOS(Windows10)からゲストOS(CentOS8)への通信 (2) ゲストOS(CentOS8)からインターネットへの通信 (1) は VirtualBox のホストオンリーアダプタにて対応 (2) は VirtualBox のNATアダプタで対応 参考: VirtualBox上ゲストOSにssh接続する＆ゲストOSからインターネット接続できるようにする。 VirtualMachie ができたら、起動する。 初回起動時に仮想光学ドライブへのディスクを挿入するように要求されるので、ダウンロードしておいた iso を選択する。 CentOS8をインストールして起動する 無事インストーラが起動したら、インストール画面になる。 以下の順番で設定。 インストール言語 日本語を選択（キーボードを日本語マッピングにしておきたいため） インストール概要 キーボード: 日本語 言語サポート: 英語を追加（OSは英語で使う） 日付と時刻: Asia/Tokyo ソフトウェア お好きなものを選択、今回の手順ではGUI使用を選んでいる ネットワークとホスト名 enp0s3 を有効化(NAT) enp0s8 を有効化(HostOnly) 上記以外はそのままでOK、必要に応じて設定する → インストール開始 ユーザの作成とrootのパスワード設定を要求されるので、rootのパスワードのみ設定 インストールが進行するのでしばらく放置。 完了したら再起動。再起動のときに、仮想光学ドライブからisoを抜いておくことを忘れないように。 入れっぱなしだと、またインストールが始まる。 初回起動 初期設定が出るので、ライセンス条項に同意。なお GPLv2 ウゴウゴ起動してくる。 デスクトップにて、謎のwelocme画面がでる。 無事起動。","tags":"Tech","url":"posts/2020/04/12/centos8_vm_1","loc":"posts/2020/04/12/centos8_vm_1"},{"title":"雑記 20200411","text":"雑記を書きたくて。 今は寝ても冷めても covid-19 のことばかり。 情報絶ちしたいと思っても、刻一刻と迫る危機、局面が気になって、どうしてもTwitterや各種ニュースが気になってしまう。 せめて、ここにはなんか別にどうでもいい文章を書き残しておきたい。 自分のこと 都内某ゲーム系エンタメ会社勤務のITインフラエンジニア。 2014年新卒入社で気づけば6年目。そろそろ転職したい機運があり、ポートフォリオにならねーかなとこのブログを始めた（ならない）。 業務都合で自宅から業務ができるだけのアクセス権とノートPC/スマホを持っていたこともあり、3月半ばから完全在宅勤務。 インフラエンジニアで24/365で呼び出しの可能性があったことが今回は幸い。 趣味はゲームと読書と音楽。 最近ハマってるのは競プロ、AtCoderで灰から茶を目指しているところ。 31歳、既婚（もうすぐ結婚1年）。 妻が妊娠中、明日で16週。9月末出産予定。（それもあり、余計に病魔にビビっている ここ最近のこと 妻はつわりがまだ安定せず、本来なら安定してくるタイミングだしだいぶ良くはなったのでちょっと出社を試みたがまだきつい＆今の状況もあり会社から妊婦は休業指示（ほんとよかった。。）。 妻と二人でほとんど引きこもり生活。週１～２回にまとめて買い出し行くのと、２～３日にいっぺんぐらい近所を散歩する以外はほとんどずっと引きこもり。 競プロのこと もともと興味はあったんだけど、一つぐらいまとも扱えるプログラミング言語覚えておきたい＆転職のときの話のネタ程度に始めた。 けっこう楽しいが、大学＆大学院でちゃんと勉強してなかったことが悔やまれるというのと、高校ではそれなりに真面目に数学やってたんだけど、あれーーこれわかるなぁっていうのが全然わからなくて、高校数学からやり直しな気持ち。。 15年も前のことだもんなぁ、覚えてないもんだ。 言語はpythonでやってる。 競プロ的には不利な言語だけど、競プロそのものが目的ではない（どっちかというとPythonの勉強が主目的）のでそれは別にOK 次回のABCで茶にあがれそう。また明日がんばろう。 仕事のこと オンラインゲーム系のサーバインフラエンジニア。 ゲームが好きというものあるけど、新卒で就活してたときに、 なるべくでかいところに行こう 好きなサービスを作ってるところへ行こう 最初に内定くれたところに行こう で最初に内定くれたとこ。ぶっちゃけ運が良かったと思う。 情報系の大学院をでてはいるけど、あまり真面目な学生ではなかったので技術スキルはからっきしで入社してる。 おもえば丸5年、それなりにがんばったもんだ。最初はsshログインやgitも知らなかった。ちょっとLinuxコマンドがわかってviを知っててギリ使えるぐらいだった。 転職したい 今の待遇はそんなに悪くないけど、以下のようなモチベーションで転職したい。 組織がしんどい → そこそこ古い会社で情シスのインフラ部隊はもう20年ぐらいの組織。昔のやりかたが凝り固まっているのと組織論が弱すぎ＆不満が多すぎて居続けるのがしんどい。人はそこまで悪くないから「すぐやめる！」ってならずにだらだらい続けてしまったけど、そろそろここにいるのはいい加減良くないと感じてる。ある意味、ぬるま湯。 新しい技術を習得できない、しにくい → チャレンジができないわけじゃないけど、ものすごく部分的なところでしかできない。大きな変化や意思決定が弱い。悪い意味でないすおーるどじゃぱにーず企業 30代になった → いうて丸5年もいて、技術面でもビジネス面でもそれなりに成長できたと思ってる。大きくチャレンジしたい欲が高まっている。 というわけで、もっと（技術的、ビジネス的に）チャレンジできる環境を求めて転職を考えているところ。 ただし、妻と生まれてくる子供のこと、および住宅の購入を検討しているため、もろもろが片付いた１～２年後を目処に。 なんか、こういう感じでそのときそのとき思ったことをちょっとずつ認めていきたい。 意味がなくてもいい。僕は文章を読むのも書くのも好きな人間だった。昔は2次小説とか書いてた。 もう一度、文章をがりがり書く習慣を取り戻したい。 小説書きたい。","tags":"miscellaneous notes","url":"posts/2020/04/11/miscellaneous_notes_20200411","loc":"posts/2020/04/11/miscellaneous_notes_20200411"},{"title":"メディアが怖い","text":"これは単なる風刺絵だけども、ほんとに切り抜きや印象操作って怖い。 しかも、意図的な思想のもとの印象操作なら（それは多かれ少なかれ人が発信するものである以上存在するでしょう）まだしも、意図しない切り抜きや不完全な情報だって存在する。 新聞とラジオとテレビしかない時代、これらの情報はある意味で「絶対」だった。なぜなら、一方通行だから。どうなんだろう？と思っても、ほとんどの場合これらに反論することはできなかった。 でも今は違う。インターネット、SNSを使って誰でも手軽に発信できるようになった。 その結果、情報の量そのものは増えると同時に質が下がるのは、これも当たり前の話だ。量が増えれば質は下がる。 そうするとますます「確かな情報」の価値が高まる。洪水のように溢れる情報の中で、しっかりとした裏付け取材が行われ、科学的な論拠が確認され、文筆を専門とする職人によって認められる記事はより正確性の高い、信頼に足る情報だと信じたいはずだった。 蓋を開けてみたら、全然そんなことないよね、むしろインターネット上の玉石混交の情報の一角と同じで、とても良い記事もあればそうじゃないものもあるよね、っていう意味で。 おまけに、前提として正しいという認識があるから、間違った情報も鵜呑みにしやすいという弊害つき。 こんな記事も、今更始まったことじゃないけどさ。 毎日新聞、これは酷すぎる。 「丸の内の出勤風景」というタイトルで中央区の写真を載せる。 ↓ 「明らかに誤解を狙っている」「丸の内はガラガラだった」「中央区の写真も遠近法で混んでるように見せてる」と指摘殺到。 ↓ こっそり記事タイトルを変更。 もはやメディアではないね。 pic.twitter.com/mcir62MOBn — 黒瀬 深 (@Shin_kurose) April 8, 2020 完全な印象操作。 実際のところどうだったかなんて、その場にいなかった人には知るよしもない。 調査の結果、朝日新聞の記事以前には、「 #東京脱出 」はほとんど使われていませんでした ハッシュタグ「東京脱出」は本当にTwitter上で拡散されていたのか？ 朝日新聞の記事による影響を調査してみた https://t.co/M3fck4zHxB pic.twitter.com/pfipHKqPI3 — ねとらぼ (@itm_nlab) April 8, 2020 こんなんもう笑うしかない。完全な捏造。 これ、捏造してるっていうのと同時に、調べりゃわかるってのをわかってないITリテラシーの低さがやばいと感じる。 ＃東京脱出、専門家「やめて」 帰省で家族に感染、新たなクラスターも 新型コロナ 記事も消えてないし、訂正もなにもない。 結局のところ、確かな一次ソースから情報を確認するしかなくて、人のまとめも企業のまとめも、あまり鵜呑みにするなっていうこと。 情報化社会に進んで、それがより明らかになったということ。 次の世代へ引き継いではいけない悪しき風習は、ぼくたちで捨ててきましょうということだ。 今日の東京 見事に終わりの始まり。ここから地獄の2週間の到来。 コロナウイルスの騒ぎ始まってから職場に来たヤバイ客で打線組んだwwww pic.twitter.com/DKlWlt1oua — まきぶろ@切り絵合同誌主催 (@otogi_zousi1203) April 8, 2020 笑った。いや笑えないけど笑った。ｗ","tags":"Social","url":"posts/2020/04/09/media-20200409","loc":"posts/2020/04/09/media-20200409"},{"title":"COVID-19 in Tokyo 20200408","text":"緊急事態宣言から一夜明けた今日の東京。 いくつかの記事から引用。 百貨店やいわゆる「不要不急」な店舗の休業などもあり、箇所によってはだいぶ人が減ったみたい。 観光やショッピングの人はさすがに今日はあまり出歩いていない模様。 「まるで正月」人出まばらな銀座 電車通勤「いつもより少ない」 緊急事態宣言初 その一方で 緊急事態宣言から一夜 都内の通勤客の様子は？ 緊急事態なのに通勤させられる人々が抱く危難 という感じで、通勤はあまり減らせてないみたい。。 変われない企業、変われない意識 日本人の悪しき因習な気がするが、変化に弱い。 これだけの外圧があっても、大きな動きは取りたがらないし、何かと理由をつけてやらない。 テレワークに約9割が賛成 それでも1割は「在宅勤務」に反対する理由とは――アンケート結果発表 「マスク・手洗い・根性」を掲げる企業も 店舗接客や工場作業などの、勤務場所が意味を持つ職種が在宅勤務できないのは当然として。 「製造会社なので在宅勤務などできない。在宅勤務ができるのは、大企業のホワイトカラーに限られる。世の中すべての企業ができるわけがない」（68・男性） なぜ製造会社だとできないんだろう？ 大企業のホワイトカラーに限られる？そんなことはない、むしろスタートアップやベンチャーの少人数の企業のほうがどんどんリモートワーク取り入れてる。 少なくとも自分の観測範囲のIT系のベンチャーとかは圧倒的にリモートで業務を継続している。 「出来る職種と出来ない職種があり、不公平だから」（50・女性） 「自分が苦労してるんだからお前も苦労しろ」理論。まじで謎。 みんな平等に足を引っ張りあう文化、ほんとやめてほしい。 「商店、サ−ビス業などは休業、廃業を意味するから」（73・男性） テレワークと関係ない。 上述した通り、勤務場所が意味を持つ業種においてはそりゃ無理でしょう。 「そもそも企業はテレワーク出来るものなら既にやっているはず。その上で、一番の懸念は『セキュリティ』問題だと思うから」（46・男性） ITにもセキュリティにも無知なオッサンが言ってそう。 問題なのはセキュリティではなく、セキュリティを含めた問題解決意識、当事者意識の欠如。 「家でやっても生産性は上がらない」（55・女性） あなたが上がらなくても、上がる人はいるし、むしろ無意味な通勤で生産性も体力も削られてる人だっている。 というような感想。 幸い自分はもともとの職種の都合もあり当初からテレワークが可能だったため、3月の半ばからずっと在宅で業務中。 もともとテレワークが当たり前ではなかったので急な切り替わりではあったけど、自宅に自分のワークスペース、PC環境を持っていたのですんなり業務を継続できている。 同じチームの人でも家庭での作業環境の違いや、家族の状況の違いもあるので、苦労してる人は苦労してるみたいだけど。 この状況下でもあれこれ言い訳をつけて出勤する、させようとする人々(=当事者意識が欠如しており、課題・問題に対して柔軟に立ち向かえない人)は、早く世代交代して欲しいなぁ。 本日の東京 完全にアカン推移、指数関数の登り始めの線が見えるよ。 ここから1週間、2週間、どういうグラフになるか、恐ろしい。。 経済の人は馬鹿なのか？ あるいは、合理的な判断ができないのか？最低でも、その意図と根拠を説明してほしい。 休業要請2週間見送り打診 なぜ現在の緊急事態宣言＋もろもろの自粛なのか？ それは、一刻も早く事態を収束させ、命を守りながら経済へのダメージをできるだけ低減させるためにだ。 緊急事態宣言が経済へダメージとなるのはわかる。だからギリギリまで判断を待ったのは、ある程度理解できる。それでも遅すぎたと思うけど。 ところがこの偉い方々は、緊急事態宣言があってもなおさらに2週間状況を先延ばしにすると。 いったいどういうロジック、根拠でそういう判断に至ったのか、理解に苦しむし想像もつかない。 地方が休業要請を受けた損失補償を求めるのに対し国は拒否。 本当に、国庫を預かってる人たちの思考ロジックがわからない。 議会制民主主義って人類には不可能なのではという気さえしてくるよ。","tags":"Social","url":"posts/2020/04/08/covid19-tokyo-20200408","loc":"posts/2020/04/08/covid19-tokyo-20200408"},{"title":"COVID-19 in Tokyo 20200407","text":"ついに？ようやく？緊急事態宣言が出た。 緊急事態宣言を発令 首相「接触を8割削減」 遅いという意見はさんざん出てたし自分もそう思うけど、まぁ難しいよなぁと思う。 疫学的にはとにかく早く人の交流を可能な限り減らして新規感染を遮断、医療現場を守ることが優先ではあるけれども、じゃあそれはいつまでどの程度なの？という視点も必要で、遮断、閉鎖により経済がダメージを受け、それによる社会的混乱や死者がでれば本末転倒ではある。ので直前まで判断を渋ったというのはそれはそれでわかる。 とはいえ結局先延ばしにすることによって感染が拡大してからの閉鎖は、より長時間の閉鎖を生むわけでしかなくて、それのぎりぎりのタイミング（あるいは既に遅かったか）が今だったんだろうなぁ。 緊急事態宣言の期間は GW明けの 5/6 までを予定、とはいえ状況次第できっとこれは延長されることもあるでしょう。 緊急事態宣言によってどうなる？ 緊急事態宣言、生活にどう影響？ 日経のまとめ記事より。 結局のところ、法的な強制力は（ほとんど）なくて、電車等の公共交通機関の停止や減便もされなければ、道路の封鎖もない。 これまで通り移動もできるし出社もできる。都県外への脱出もできる。 ただし、多くのお店等には休業の要請がいき、さすがに国の緊急事態宣言とあれば、多くの店舗は休業するでしょう。 それにより、人の街中への行動目的も大幅に減るので、外出自粛にはより一定の効果がありそう。 とくにこれまでの自粛のお願いを聞いてこなかった層にとっては。 楽観的な予想 今回の緊急事態宣言、店舗休業要請が功を奏し、多くの人々の接触が減ることで感染拡大に歯止めがかかる。 現在まで感染してしまっている人はこれから発病していくが、2週間後がピーク。 陽性検知数的には1万ぐらい？ 残念ながら重篤な羅漢者向けの病床は不足してしまうので、重篤化した一部の方は亡くなるが、それも千の台には上らない程度におさまり、その後徐々にピークアウト。 さらに2週間が経過した時点（5/6 緊急事態宣言解除）で、新規感染者数は減少傾向となり、引き続き出続けるので、さらに追加で1ヶ月程度状況維持して、その後解除ぐらい。 うーん、こんなうまくいかなさそう。。 悲観的な予想 最悪のケース、まず緊急事態宣言による外出自粛があまり意味をなさない。市中感染が広がり続ける。 多少緩やかになるにしても、羅漢者の指数関数的な増加には有意な効果は得られず、羅漢者はどんどん増えていく。 軽症者は自宅隔離やホテル隔離でなんとか生き延びるものの、患者の絶対数が増え重篤化した人々は（トリアージされ）どんどん亡くなっていく。。 2週間後の時点で陽性検知数は下げ止まらず（＝緊急事態宣言による外出自粛が意味を為さなかった）、むしろ増える一方となり医療リソースはパンク。 現場でも院内感染が発生し、医療リソースのキャパシティ自体が下がり、経済は死んでいく。 この状況の場合、さらに強制力を持った都市封鎖（ロックダウン）が必要と判断される。 おそらく（法的に難しいだろうけど）それが発令されるのは、この2週間経過のタイミングからさらに2週間様子みて、緊急事態宣言の当初の終了予定日のGW明け、もしくはGW突入前あたり。 なんらかの超法規的な措置で人々の移動が制限され、GWでの外出もすべて自粛となる。ここからさらに1~2ヵ月経過で、なんとか羅漢者の数はピークを迎えるが、夏から秋にかけて引き続き非常事態宣言が継続されるような状況。。 少なくとも、自分だけでもなるべく家に閉じこもっておこう。。","tags":"Social","url":"posts/2020/04/07/covid19-tokyo-20200407","loc":"posts/2020/04/07/covid19-tokyo-20200407"},{"title":"AtCoder Beginner Contest 161","text":"開催告知見落としていて、すっぽかしてしまった＞＜ 問題は、事後チャレンジ。今回もCまでは解けたなぁ。これとれてたら、茶になれてたかも。。 A A - ABC Swap swap と書いてあるけど、入力数もswapの仕方も固定のため、固定で出力してやれば良い。 提出 AC B B - Popular Vote 問題分の説明通り実装してあげればよい。 選ぶ候補の中から最も得票数の少ないものが条件を満たすかどうかのみチェックすれば良い。 提出 最初、判定条件の「未満」の部分で誤りがあり、1WAしてしまった。 修正して無事AC C C - Replacing Integer 数値を置き換える操作を繰り返す。 ただしそのまま愚直に実装するとO(N)となってしまい、制約からLTEになってしまう。 実際のところ置き換えを繰り返す作業は一回modをとることで完了するため、O(1)になる。 そのうえで、求めた mod が条件を満たす最低値かどうかもう一度判定してやればよかった。 入力例3が親切で 1000000000000000000 1 これを愚直な実装にいれれば（ループ回すと）終わらないことを教えてくれる。 提出 さくっとできた！ 上記3問はさくっと解けた。 diffはわからないけど、多分これ参加して解けてたら茶にあがれてたかなぁ。。 また次回！","tags":"Tech","url":"posts/2020/04/05/abc161","loc":"posts/2020/04/05/abc161"},{"title":"AtCoder Judge System Update Test Contest 202004","text":"Judge System Update Test Contest 202004 に参加しました。 A A - Walking Takahashi 現在位置がLとRの間ならそのまま出力、Lより小さいならLを、Rより大きいならRを出力すれば良い 提出 ちょっと冗長だった。absは不要だな。 以下でOK #!/usr/bin/env python3 # -*- coding: utf-8 -*- S , L , R = map ( int , input () . split ()) if S < L : print ( L ) elif R < S : print ( R ) else : print ( S ) こっちのほうがシンプル。 B B - Picking Balls RとBの配列を持って置き、入力を受けてR/Bどちらかの配列に append して、入力を受け終わったらソートして R → B の順番に出力すればよい。 提出 C ちょっと挑んで、あ！これ深さ優先探索だ！ってとこまではわかったけど、家庭の事情によりここで終了。 制約が小さいので、全部列挙して出力させたほうが早いのかも。ｗ と思ったら、やってる人いた。 unratedなので、いろいろ遊んでる人もいるみたいｗ #JSUTC202004解説 C問題です。 しっかり手を動かして10通り列挙しましょう。 これ以外の回答は認めません。 pic.twitter.com/sGwr4vEy5V — Reider (@Reider_AC) April 5, 2020 次回のABCで、茶になるぞー 改めてトライする。","tags":"Tech","url":"posts/2020/04/05/testcontest_20200405","loc":"posts/2020/04/05/testcontest_20200405"},{"title":"COVID-19 in Tokyo 20200404","text":"本日の東京の感染者は、ついに1日で100人を超えた。 3/25、つまり1週間とちょい前ぐらいには「東京でもつに増え始めた」という状況だったのが、およそ10日でついに1日あたり100人超えの感染確認に。 発症、検査から陽性確認までおよそ2週間と言われているので、いま発症して確認されている人たちは、あぁきっと3/20の3連休にもらったんだろうなぁと。 あのタイミングで緩んでいたの、完全に失敗だったんだろうなぁと感じている。 この2週間でのぐぐっと増え始めたのは、ニューヨークとおなじ指数関数的な増大の始まりか。 そして病床数も限界ぎりぎりの模様。というかcovid19の増加で限界近いということは、すでにそれ以外の通常の病床者を収容できない状態なのでは。。 東京都、新たに感染者１１８人 初の３桁、病床数に懸念 政府が打ち出している、国民に直接「病気を予防するための措置」は、相変わらず1世帯あたりマスク2枚の措置のみ。 経済対策としてのフォローはいろいろやり始めているが、そもそも根本的にこれ以上感染者数が増えるのを抑え込まないと、戦いはジリ貧になっていき、今の日本にジリ貧の戦いを何ヶ月も続けられる力があるのか？というのはとても疑問なところ。 内部保留がそれなりにある一部の企業は生き残れても、国内企業の大半を占める中小はかなり苦しいでしょう。 幸いにも、たぶん自分がその「内部保留がそれなりにある大企業」と思われる企業に所属しており、今の所業務にも支障をきたしておらず、フルリモートで在宅勤務できてるので、とりあえず自分が感染しなければ程度には思えているけど、 結局、日本は法律的な罰則を設けた「ロックダウン」はできないみたい。それ事態はしかたないし、ある意味日本という国の民主主義の正しい状態な気もする。 「緊急事態宣言」が出た場合 東京都の対応 と同時に、この状態で「なんとかしろ」と言われても何もできない状態の内閣ってほんとかわいそうだな、、ぐらいの気持ち。 感染症との戦いにおいて、敵は標的を区別しない。人類は人類で団結して戦わないといけないし、身内の攻撃に余計なエネルギーを使ってる場合でもない。 自分にできることを、粛々とやるのみ。 はぁ。ほんとにこの世代は、と思ってしまう。 事の重大さをわかっていない老人達と 危機感を持っている若者達との違い 左巣鴨 右原宿 pic.twitter.com/dq2nP8HCL0 — オメガヴェンデッタ (@VRG_Ray) April 4, 2020 もちろんこれは極端な例（わざわざ街を選んでるのだから）だから、これだから〜〜とは言いたくないし言うべきでもないけど、それでもため息でちゃうね。 最悪の状況になってるイタリアでも。 事の重大さをわかっていない老人達と 危機感を持っている若者達との違い 左巣鴨 右原宿 pic.twitter.com/dq2nP8HCL0 — オメガヴェンデッタ (@VRG_Ray) April 4, 2020 ナポリはそこまで被害が大きくないのかな、とても余裕があるように見えるけど、これだとまだしばらく最悪の状況は続きそう。。","tags":"Social","url":"posts/2020/04/04/covid19-tokyo-20200404","loc":"posts/2020/04/04/covid19-tokyo-20200404"},{"title":"python-pelican に theme を導入する","text":"ものは試しに。 やり方 pelican の theme は、以下の repo で管理されている。 ここはただのファイル置き場なので、別にこの repo に拘る必要はなさそうだけど。 pelican-themes いくつかの theme は、それぞれの作者の repo にあり、リンクになってる。 上記 repo を、pelican の project directory から辿れる場所へ clone する # git clone https://github.com/getpelican/pelican-themes clone した theme を、 pelicanconf.py 、 および publichconf.py に適用する THEME変数に、ディレクトリへのパスを指定してあげればよいみたい THEME = \"../pelican-themes/bootstrap2-dark\" 上記で、 make html すると、 bootstrap2-dark が適用された。 参考 Pelican Themes pelican-themes Pelicanにテーマを導入してみる メモ 過去エントリのアーカイブリンク タグクラウド 静的ページへのリンクを目立つ場所に貼る 上記を解決できそうなテーマを探しつつ、他のプラグインも試す","tags":"Tech","url":"posts/2020/04/04/pelican-theme","loc":"posts/2020/04/04/pelican-theme"},{"title":"COVID-19 in Tokyo 20200401","text":"１住所当たり２枚の布マスクを配布の方針 安倍首相 なんというかもう、何言ってるんだろう、、という感じですが。 一世帯あたり、2枚のマスクを配布していただけるそうです。何人家族でも、2枚。 どういう複雑な意思決定プロセスを経て、こんな馬鹿げた決断ができるんだろうか。そしてどの程度の予算と費用対効果を見積もっているんだろうか。 何もしないよりはマシ？かとも思うけど、無駄遣いするぐらいならいっそ何もしないでくれとも。 使い捨てでない布マスクが感染症予防にどこまで効果があるのかも疑問ですが、配るならせめて医療従事者や優先的に必要とされる人に配ってほしい。。 と思うのは、この国の政府に期待するのは高望みなのか。 とはいえ一方で。 新型コロナウイルス感染症 お役立ち情報 霞が関のお役人のみなさまは、糞みたいな労働システムの中で不眠不休で対応を続けているはず。様々な支援策が打ち出されてきてはいるので、使えるものは適切に活用させてもらいたい。 なんというか、仕組みがイケてなくて気合と根性でどうにかするシステムの破綻の極限にいる感じ。 もう一世代、世代交代したら海外に20年おくれてもっとまともな効率化ができるのかな。 自分が上に立つ世代になったときに（上に立てたら、としてだけど）その時の下の若い世代の足かせにならないようにしたいものだ。 東京の本日の陽性患者数は66人。 かろうじて横ばいだけど、2週間前にこの無自覚感染が起きていたとすれば、この2週間の間にどこまで広がっていたのだろうか。 今週来週、気が重い。","tags":"Social","url":"posts/2020/04/01/covid19-tokyo-20200401","loc":"posts/2020/04/01/covid19-tokyo-20200401"},{"title":"Coinhiveに関する意見陳述","text":"【寄稿】コインハイブ事件 意見書ご協力のお願い 上記について、自分なりに考え、意見書を提出してみた。 恥ずかしながら、裁判のことや法律のこと、また法律の解釈についてはまるで無知なので、ものすごく「自分なり」な意見書になってしまったが、とはいえ書いて提出した。 日本国憲法第12条によると、 この憲法が国民に保障する自由及び権利は、国民の不断の努力によつて、これを保持しなければならない。又、国民は、これを濫用してはならないのであつて、常に公共の福祉のためにこれを利用する責任を負ふ。 らしい。もちろんこの条文はなんとなく知っていたけど、何かを意識して、努力して、意見を述べるということはこれまであまりやってこなかった。 選挙には行くし、投票もするけど（白票もよくいれるけど）、なにか努力をして、自身の自由や権利のために戦う、というのはこれが初めてな気がした。 あまりいい文章がかけたとは思えないけど、自分なりに、今回の判決内容を読んで、解釈して、自分にどう影響があるかを考えて、書いてみた。 この行為に意味があったと思い、最高裁の判決に期待したい。 なお、原本を郵送で提出する必要があり、それはまだしてないので忘れないように。。。","tags":"Tech","url":"posts/2020/03/31/coinhiveopinion","loc":"posts/2020/03/31/coinhiveopinion"},{"title":"COVID-19 in Tokyo 20200329","text":"本当に、この人たちはバカすぎてどうしようもないなぁ、、という気持ちでいっぱいだ。 なぜこれだけ世界中で騒がれている問題に対して、今目の前に危機が迫ってるのに、こうも当事者意識が持てないのだろう。 警備員も諦めムード…目黒川に指示に従わない花見客 女子大学生が自粛せず欧州旅行、帰国後に発症…マスクして卒業式出席 若者、東京で買い物やカラオケ 外出自粛「気にしない」「遅い」 こんなのも。 今晩は自治会総会という時代錯誤かつ、今の状況錯誤な場に震撼した。すし詰めの公会堂に100人あまり。長老者が昨年会計や活動を紙に書いてるのに読み上げはじめ、、、身の危険を感じて、3分程で僕だけ会場から冷たい目線を背中で感じつつ脱出。 pic.twitter.com/3gb4SQJroh — ogawa kenzo (@kentigereagle) March 29, 2020 コロナで逮捕された四天王 pic.twitter.com/c2G6zGHNcs — 看護メン (@nursemens4321) March 29, 2020 国や都の「自粛要請」について、個々人の判断における自粛ではなくて、もっと強制力のあるモノにしなよ！とは思いつつ、それは法的に難しいらしい。 ※別途調べるが、戦時中の国家総動員法の反省をうけて、法的に国民に行動を強制できない、的な事情があるらしい とはいえ国内の状況や海外の状況を見れば、いままさに（あるいはもうそのターニングポイントは過ぎているかもしれないけれど）全力で拡散防止に努めないといけない状況なのに、こうも自覚を持てない人間がこれだけいるのかというのに愕然としてしまう。 東京で新たに68人の感染を確認 1日での最多を更新 東京都の陽性患者数グラフ 東京都 新型コロナウイルス感染症対策サイト より まさに、終わりの始まり。 2週間後には日本の医療崩壊が見られるでしょう。 せめて、自分と家族だけでも最低でも１～２ヶ月は罹患しないように気を付けなければ。。","tags":"Social","url":"posts/2020/03/29/covid19-tokyo-20200329","loc":"posts/2020/03/29/covid19-tokyo-20200329"},{"title":"競プロ Practice 日記","text":"AOJ に挑戦した 競プロの基礎練習編として、AOJがお勧めされていたのでトライしてみた。 AIZU ONLINE JUDGE mystatus 入門編である ITP1 について、ITP1_1からITP1_6 まで、24問を解いた。 ABCでA/Bは概ねできてるのでほとんど躓かずにできたけど、一部やったことないタイプの問題とかもあって面白かった。 ITP1は全部挑戦しようと思います。 AtCoder 本日の練習 ABC133のA～Cに挑戦。 A/Bはさくっとできて、Cにまたちょっと苦戦。 最初見た時に、全探索すると計算量が間に合わないから計算量落とす工夫がいるなと思い、その過程で場合分け等々を考えて計算していたけど、そもそも答えがWAしてしまい導出ロジックがうまく組めず。。 結果的に難しく考えすぎてて、条件に収まる範囲での全探索であれば十分for文で行けることがわかったので、それで実装しなおしてACできた。 うーん、あとで考えればあーこれで良いやなんだけど、これをさくっと思いつきたい。","tags":"Tech","url":"posts/2020/03/29/practice_20200329","loc":"posts/2020/03/29/practice_20200329"},{"title":"AtCoder Beginner Contest 160","text":"本日は AtCoderBeginnerContest160 でした。今日は無事最初から参加することができました。 3完で、Dは知識がなくてできない系だったのでちょっと挑んだけど諦めてギブアップ。 A A - Coffee 3文字目と4文字目が一致 AND 5文字目と6文字目が一致 が成立したら \"Yes\"、そうでなければ \"No\" を出力 一発AC 提出 最初？？？だった3項演算子も、こういうときにわりとさくっと書けるようになりました。 B B - Golden Coins 入力nを500で割った（切り捨て）値×1000+その残りを5で割った（切り捨て）値×5 を出力 一発AC 提出 C C - Traveling Salesman around Lake 閉路の各頂点を辿るシンプルな巡回セールスマン問題。 閉路の中で最大の節点間の距離を出して、全体の距離からその値を引いた残りの距離が答えというのがわりとぱっとわかったのでこれもさくっとできました。 実装上では、1周してきたあとにたどり着く2回目の最初の点を、リストの最後の要素に追加して、各距離感を算出して求めました。 一発AC 提出 D D - Line++ 直線状の無向グラフに1ノードを追加して、ノード間の距離をどうたらこうたら～みたいな感じ？ ここでギブアップ。 グラフの最短距離を求めるやりかたがわかってれば多分できるなかなーと思いぐぐってるといくつかの聞いたことあるアルゴリズムがでてきたので、改めてそれらについて復習する。 本日はここまで。パフォーマンスは 720 でした。 茶まであと一歩。","tags":"Tech","url":"posts/2020/03/28/abc160","loc":"posts/2020/03/28/abc160"},{"title":"COVID-19 in Tokyo 20200328","text":"本日18時、安倍総理から緊急の会見があった。 新型コロナ「長期戦覚悟を」 事態悪化なら学校再開見直し―安倍首相会見 Youtubeの配信でリアルタイムで見ていたが、前置きや比喩表現、繰り返し使われる形容詞が多すぎて、それで何が言いたいのかがさっぱりだった。 この記事では、今回の会見におけるCOVID-19の政府としての対応方針には触れない 何が言いたいのかというと、特に日本の政治や一定以上の上の年代の人におおい「お気持ち会見」について。 結論をズバッと言わず、冗長な前置き、関係者へのお気持ち表明、繰り返し使われる比喩フレーズ。。 何が言いたいねんてのをとても感じるーー、もぞもぞしてしまう。 今回紛れもない100年に一度レベルの人類の危機が迫っており、この東京、日本でもまさに事態がこれから悪化しそう、最悪の状況を食い止められるかどうかという局面において、具体的にどういう施策をするのか？どういうことを国民に要請するのかを期待したのに、そういう話がずばっとできない日本の指導者に、だめだこりゃを感じたのでした。。 ただこれは、安倍総理がダメかっていうとぜんぜんそういう話ではなくて、他の与党の党首やらなんやでも、似たりよったり。 ギリギリ印象良いのは、河野大臣ぐらいか。。 これって結局、ある程度上の世代の人たちはこの「お気持ち」が大事な、悪い意味での日本人らしさがあって、投票率が高いのは依然としてその世代なんだろうなと思う。 こういう姿勢にごちゃごちゃ文句いっても、投票率が低い世代である以上そういう思いが届かないのは議会制民主主義として当然の結果なので、ちゃんと投票行きましょうと改めて。 私はいま新型コロナめちゃめちゃびびってるのでまったくお家から出てかないようにしてるし、幸い職場もかろうじてフルリモート対応できる状態だったので3月中旬からフルリモートで仕事しています。 制度的には整っていないんだけど、職種的にもともとできる状態になってたのが幸いした感じ。 すでに犠牲者はでてしまっているけど、これ以上大きくならないように収まってくれることを祈りつつ、、今日の会見や日本の現状を見てるとここから悪化していくんだろうなぁと感じた日でした。","tags":"Social","url":"posts/2020/03/28/gov_interview","loc":"posts/2020/03/28/gov_interview"},{"title":"AtCoder Practice 日記","text":"今日はできなかった 本日挑戦してた問題はこちら。 AGC016 - A - Shrinking 結果的にACはしてるけど、今回は解説を見ても題意をロジックに落とし込めず、カンニング回答なので実質できてません。。orz 問題文が意味する操作の実装が実現できず、回答みても「シミュレーションすればよい」となっているので、これは数学以前に単純な国語の能力の問題なのか。。 ACしてる他の人の回答を見ても、問題文で与えられる操作を実際に実装しているのではなく、条件成立で題意を満たすか判定しているので、 実際に問題文に書いてある操作をそのまま実現して全探索するのではないというのは理解できるが、実際の実装が何を意図してこういう動作をさせているかがつかみきれない。。 問題文の操作の内容 長さNの文字列tが与えらえる 1回の操作につき任意の1文字を消去（長さが N-1 になる）して、各i番目の文字t'i を ti もしくは t(i+1) に置き換える 入力例1だと、入力は serval であり、例えばこの文字列は 例えば、serval → srvvl → svvv → vvv と変えればよいです。 とすればよいらしい。ここでこの操作は 0) serval eを消去して、 1_1) srval t(4)はvであり、t'(4)をaからt(4)であるvへ置き換えて 1_2) srvvl rを消去して、 2_1)svvl t(4)はvであり、t'(4)をlからt(4)であるvへ置き換えて 2_2)svvv sを消去して 3)vvv という意味かな。。いやそうなんだろうけど。 この操作をどう実装するの（シミュレーションするの）？が不明というところ。 そしてACしてる人たちはこんなシミュレーションをしておらず、この部分は配列の要素数の最大最小からO(1)で求まるっぽいということはわかった（そんな気はする） もしシミュレーションする場合は、文字列のユニークな文字列全部に対して、 ※O(N) 操作をO(N/2) 繰り返すようなことになりそうだけど、ここがO(1)の実装できそうなので、そこが掴み切れてない、というのが今日のところ。 うーん、ようわからん。。","tags":"Tech","url":"posts/2020/03/27/practice_20200327","loc":"posts/2020/03/27/practice_20200327"},{"title":"COVID-19 in Tokyo","text":"東京 新たに40人以上の感染確認 新型コロナ ここにきて、東京での感染者数増加のニュースが報じられました。 中国で発生してなんとなく日本へも入ってきて、あー水際対策失敗だったなとなんとなくうかうかしてたら、オーストラリアや北米、また欧州で一気に広がりをみせていつのまにか世界は大混乱に。その一方で日本は早い段階で入ってきたにもかかわらず、なんとなく大事には（北海道は緊急事態宣言だしてましたが）至っていないような雰囲気でしたが、東京オリンピックの延期が発表された昨日の今日でこの一報。 また本日には、小池都知事による記者会見が開かれ、少なくとも今週末の外出自粛が要請されたという状況です。 都知事、週末の外出自粛要請 感染爆発「重大局面」―新たに４１人確認・新型コロナ 僕個人としてはこの事態を重くうけとめ、金曜日の予定はキャンセル、土日も予定入れる調整中でしたがキャンセルとしました。 また、買い占めに参加しているようで大変不本意ではあるものの、万が一の外出禁止に備えて、ちょっと多めに食料品の備蓄を買い込み。 とはいえいつもよりちょっと多い（切れそうなものは早めに補充）程度ですが、これで少なくとも週明けまでは外出しない予定です。 イタリアやスペインでは大変な事態みたいで、心が痛い。。 スペイン、新型コロナ死者数が過去24時間で738人増－これまでで最多 ピエモンテのしあわせマダミン２ - 24年暮らしてきたイタリアが、大変なことになっている。 受ける予定だった、令和2年春季の情報処理技術者試験も中止に。 令和2年度春期情報処理技術者試験・情報処理安全確保支援士試験の取りやめ（中止）について どうか、早く落ち着きますよに。","tags":"Social","url":"posts/2020/03/25/covid19-tokyo","loc":"posts/2020/03/25/covid19-tokyo"},{"title":"AtCoder Practice 日記","text":"先日の日記 AtCoder Beginner Contest 159 に書いたように、AtCoderで競プロ、およびpythonの勉強を始めました。 競技プログラミングもpythonもまったく初心者なので、いまはまだ灰レート、茶を目指している段階です。 AtCoderには有志で作られている連携サービスのようなものがいくつかあり、そのうちの一つに AtCoder Problems というのがあります。これは私のページ。 AtCoderで記事を検索すると、この AtCoder Problems を見て、解いていない過去問題を埋めたり、streak を伸ばしたりしながらスコアを上げていったという事例があり、それをまねて頑張って streak を継続しています。 streak を継続するためには、1日1問以上、まだ一度もACしていない問題をACする、という条件がつきます。 私はまだ始めたばかりなので、解いていない過去問も大量にあるので、まだしばらく余裕をもって続けられそうですが、早晩A-B問題は尽きると思われるので、そのころには本格的にCは余裕、Dに挑戦できるようになってないとな、、といったところ。 現在 streak は20日で、AB問題はどちらも 1/4 ほど埋めたので、およそ2ヶ月ぐらいでここからどこまで成長できるか、がんばっていこうと思います。 2020/03/24 現在のステータス。 現在は、レコメンドで dif500 前後の問題が提案されているので、それに従い概ね500~600のC問題を含む未挑戦のABC過去問の、A-C問題を中心に解いています。 本日の挑戦 本日挑戦したのは、 ABC094 。 A問題B問題は無事さくっと解けたけど、C問題は問題文を見て愚直な解法はすぐに思いついたけど、また数学的にどう計算量を落とすか？で苦戦してギブアップ。 最初に実装した提出。当然TLE https://atcoder.jp/contests/abc094/submissions/11185141 毎回元のリストから対象の1要素を抜いたリストを生成し、そこから中央値を抽出するという手法。 確実に解けるけど、N回リストのコピーとリストの操作が発生するため、O(N&#94;2)かな？ 解説を見て作った答え、AC https://atcoder.jp/contests/abc094/submissions/11185502 言われてなるほどと思ったけど、中央値はソート済みの元リスト（Nが偶数）の中央のどちらかの値になるため、それよりも小さい数なら (2/N)-1 番目の要素、大きい数なら (2/N)+1 番目の要素でOK これなら、全部の要素に対してO(1)で答えがでるので、トータルはO(N)になる。 うーん、解説みたらなるほどだけど、これをぱっと思いつけるようになりたい。。","tags":"Tech","url":"posts/2020/03/24/practice_0324","loc":"posts/2020/03/24/practice_0324"},{"title":"AtCoder Beginner Contest 159","text":"去年の暮れから python の勉強を始めるとともに、競技プログラミングを始めてみました。 競技プログラミングをやろう！というよりも、pythonの勉強の一環でプログラムを書く理由のためにという意味合いが強かったですが、やり始めるとけっこう面白い。 面白いというか、そういえば自分はこういうのを楽しいと思って情報系に進んだんだっけなぁというのを薄ぼんやり思い出すような。。 これでも一応情報系の大学院を出ているので、授業でアルゴリズムやデータ構造をやってたはずですが、あまり真面目な学生ではなかったので、イチから出発です。 現在はまだレートは灰で、そろそろ茶にはあがれそうかな、どうかなというところ。 緑には完全に実力不足なので、もうちょっと勉強がんばって緑まではあがりたいなという所です。 しばらく続けるつもり。 今の目標は、A問題B問題はなるべく早く終えて、C問題をクリアしてできればD問題に挑んで回答の提出までといったところです。とはいえC問題でもまだまだ詰まるので、3完安定がいまの目標かな。 ABC159 本日のABC159は諸事情で30分ほど遅刻して開始しました。 A、Bはさくっと消化して、今回はCも無事回答することができました。 とはいえ、今回のCは大分簡単だった気がします。それほど確証はなかったけど、こうかな？でやってみたらACしてしまった感じ。 Dにも挑戦して、要求された解を得る実装はできたけど、処理効率がよくなくTLE。 これは、見た目でも自分の実装が効率悪いのは見えていたので、回答・解説がでたら改めて実装しなおしてみようと思います。 自分の提出 A https://atcoder.jp/contests/abc159/submissions/11109386 和が偶数になるのは、（奇、奇）or（偶、偶）の組み合わせで選んだ場合なので そのまま、mとnそれぞれから2個ずつ選ぶ組み合わせの合計数。 B https://atcoder.jp/contests/abc159/submissions/11117079 要件通りの実装。3つの条件に対して3回ループしてるから効率よくない気がするけど、制約下では問題なし。1ループで済んだりするのかな。 C https://atcoder.jp/contests/abc159/submissions/11122281 ちょっと考えて、一端全探索の実装を作って実際に最大になる場合の3つの値の組み合わせを見てみたら、なるべく均等に割った値であることがわかったので、そうなるように実装。 ただし、小数の考慮がなかった(整数でしか求めてなかった)のでWA。 最初の提出(WA)は、全探索パターン。 https://atcoder.jp/contests/abc159/submissions/11119056 ここから結果を出力してみて、lが3なら(1,1,1)、lが999なら(333,333,333)、lが1000なら(334,333,333)ということがわかった。 2回目の提出は、整数で出力してしまっていたため、WA。 3回目でAC。 D https://atcoder.jp/contests/abc159/submissions/11127645 TLE。まぁ雰囲気的にもだめ。題意の解は求められるけど 配列の要素すべてに対して、一つずつ抜いた配列を作るループ 上記で作成した配列の全要素に対して、各要素の数をカウントするループ 上記のカウントに対して、組み合わせの個数を計算するループ の3重ループの愚直な実装でTLE。 これはもうちょい数学的考察で短くできそうなため、解説見て復習する。 追記： https://atcoder.jp/contests/abc159/submissions/11142253 解説を参考に無事AC、これは数学的考察力の不足 感じていること 2ヶ月ほど挑戦して、基本的な考え方はつかめてきた一方で、 単純な実装力の不足、アルゴリズムの知識の不足 問題に対する数学的考察、計算量を落とす工夫、および基本的な数学の知識 に対して、勉強する必要があると感じているし、逆にそこが不足していることがだいぶわかってきたので引き続き勉強を続けていきたい。","tags":"Tech","url":"posts/2020/03/22/abc159","loc":"posts/2020/03/22/abc159"},{"title":"新型コロナウィルス流行における日米の雇用に対する文化の違い","text":"日本経済新聞 - 雇用・資金繰り重点 政府、緊急経済対策へヒアリング 安倍晋三首相はヒアリングの冒頭で「何としても雇用は守りぬかなければならない。個人、あるいは中小・小規模事業者が事業を継続できる状況をつくっていく」と語った。 Newsweekjapan - 米コロナ失業1600％増の阿鼻叫喚、雇用統計に注目 3月7日には400件だった失業保険の申請件数が、17日には6800件を上回った。10日間で1600％の増加だ。 ドナルド・トランプ米大統領の経済諮問委員会の前委員長であるケビン・ハセットは、CNNの金融ニュースサイトに対して、4月の新規失業者数は100万人にのぼる可能性もあり、「雇用統計の数字は、これまでで最悪レベルの落ち込みになるだろう」との見方を示した。 Bloomberg - 米財務長官、新型コロナで失業率20％となる公算－行動なければ ムニューシン米財務長官は17日、共和党上院議員との会合で、政府による対応がなければ、米失業率が20％に達する可能性があるとの考えを示した。 とても対照的だなと思い。 アメリカでは、レイオフは一般的に行われる。 市況や企業状況が悪化した場合には、ごく普通にレイオフが行われるため、逆に言うと人々はレイオフにもある意味で慣れているんだろうな。 アメリカの多くのセクターではレイオフが急速に拡大しており、失業保険の申請数が14日までに28万件/週、21日までに225万件/週という記録的な水準にまで激増するとゴールドマン・サックス。225万人。。 https://t.co/uO2t4OimS0 — Kenji Shiraishi (@Knjshiraishi) March 20, 2020 個人的に好きなレイオフネタその1: レイオフされた社員がその週末の会社の飲み会に普通に参加して、レイオフした人と談笑してたこと。「うちの会社がさ、あ、ごめん君らの会社だった」ってジョークがすごく印象に残ってる — Sho Shimauchi (@shiumachi) March 18, 2020 笑ったｗ 日本は現在政府主導で 雇用を守る（レイオフはしない） （特に）中小企業を守る という動きをしているが、アメリカでは、企業自らが自らを守るために容赦なく従業員を解雇している。 もちろん、これは単なる文化の違いでありどちらが良い悪いではない。 それぞれの国にそれぞれの動きがあって興味深いと思うけど、レイオフがある程度当たり前で、失業保険や再雇用、転職の動きが当たり前であれば、一定のスキルを持つ人はそこまで悲観はしていないんだろうなとは思う。当然、経済の悪化は好ましいものではないけれども。 とはいえ、どっちのほうが良いのだろう？ どっちも良し悪しがある前提ではあるけども。 個人的には、新型ウィルスによる雇用への最大のリスクは、企業の倒産だと思う。 日本でも既に事例は出始めている。 日本経済新聞 - 新型コロナの関連倒産、多業種に拡大懸念 このような形で雇用が失われてしまうと、日本の労働者はアメリカほど柔軟に対応できないし、行政支援もアメリカほど慣れていないのではないかなと思う。 転職や再就職なんてしたことない人もたくさんいるだろうし。 終身雇用が前提の日本社会のほうが、この状況になった場合のダメージは大きいだろうなぁと思う。 自分も人のこと言えない。 日本企業であればレイオフはまずないが、当然のことながら倒産の可能性はなくはないので、その時にオファーを受けられるだけのバリューを持っておかねばと感じる。","tags":"Social","url":"posts/2020/03/22/employment","loc":"posts/2020/03/22/employment"},{"title":"「100日後に死ぬワニ」が終わったあとに始まった商売に関するもやもやについて","text":"きくちゆうきさんがTwitterで連載していた「100日後に死ぬワニ」が100日目を終えて終了した。 「100日後に死ぬワニ」 100日目 pic.twitter.com/r0Idn9I7mR — きくちゆうき (@yuukikikuchi) March 20, 2020 僕自身はフォローはしていないしそこまで追っていなかったが、TLに時折現れ、ふふっと和ませてくれる雰囲気は好きだったし、100日目の終わり方についてもとても綺麗で良い締めだったと感じた。 連載中は、死ぬのが確定しているとして、しかしこの流れでどう気持ちよく終わるんだろうと気になってもいた。 結果的にこの終わり方は、当初のタイトル通りの「100日後に死ぬ」を、明確にではないけど強く暗示しつつ、読者に想像を委ねる綺麗な終わり方だったと思う。 これまでの99日間継続した4コマのスタイルを崩し、とても印象的なそれでいて美しい絵でもあった。 およそ3ヶ月ちょっとだったけど、TLを賑わわせてくれた作品だったと思う。 その直後に始まるコラボやら映画化やらの宣伝 上記の最終話のツイート直後に、以下のツイートがPOSTされた。 生きる。 https://t.co/fvfunOYJqD pic.twitter.com/usgNEMuqXV — きくちゆうき (@yuukikikuchi) March 20, 2020 pic.twitter.com/ttMazxRMY9 — 100日後に死ぬワニ 公式 (@100waniOfficial) March 20, 2020 正直言って、？？？だった。 それ以上に、不快だと感じてしまった。 この記事は、なんでここでそんな気持ちになってしまったのかを自分なりに考えてみようと思って書いている。 お金儲けは悪いことか？ 断じてNOだ。 素晴らしい作品にはそれ相応の支払いがあって然るべきだし、間違いなくこの作品は素晴らしい作品だった。 きくちゆうきさんの作風はどちらかというとニッチというかサブカルというかそういう風味で、あまり大衆向けなものではないが、それでもこの「100日後に死ぬワニ」はその衝撃的なタイトルとは裏腹に、1日1回、ふふっと和ませてくれる誰にとっても癒しのような作品だ。 RT数、いいね数がその査証であることも間違いない。 つまり、「100日後に死ぬワニ」はすばらしい作品だし、素晴らしい作品がグッズ化されたり書籍化されたり、映画化されたりで、なんらかの形できくちさんへ大きなバックとなるのは、素晴らしい作品を作ったクリエイターに対してとても良いことなはずである。 なのになぜその後の商品展開にもやっとしたのか？ これはつまり、1日1日4コマ形式で届けられる作品、きくちゆうきさんの作品を見て楽しんでると思っていたら、実はその背後に「仕掛けられたビジネス」があったことに対する気づきなのではないかと思う。 たしかに「100日後に死ぬワニ」はとても素敵な漫画だった。 1日1話ずつ更新され、しかもタイトルに100日で終わる（とは直接書かれていないけど）ことが明示されており、終了が近いことが最初から明確ながら、 1日1日をのんきに過ごすワニくんになんとなく和む日々は、とても良いものだった。 これはつまり、作品の良さもさることながら、この作品の連載スタイルが Twitterで作者のアカウントから直接 1日1話ずつ更新されていたこと のみであったことが、ポイントなんじゃないかと思う。 途中でLINEスタンプの発売があったが、LINEクリエイタースタンプはクリエイターが自分で作って自分で申請して販売するものだから、大きなバックも必要ない。 上記の前提だからこそ、Twitterのユーザ全体で楽しんでいた、その作品の更新スタイルも含めて楽しんでいた、ある意味Twitterでの内輪ノリ的なスタイルで連載されていたものが、 じつは背後にたくさんの大人とビジネスが絡んでいた仕組まれた内容だったという気付き を、裏切りのように感じてしまったのではないかなと思う。 もちろんこれはまったく悪いことではない。 ビジネスとしてやっちゃいけない理由なんてないし、1人で作品展開をする必要もないし、むしろビジネスとしてやるならそれだけのことをしたほうが大きな利益につながるだろう。 でも、連載が終わる100日目まで、きっと毎日この作品を楽しんでいた多くの人々は、そんなことは露知らず、純粋に、1人のクリエイターが、面白い漫画を1日1話勝手に書いて、勝手に公開していただけ。 そう感じていたと思うし、だからこそ、そこからの急速な切り替わり、急に商売が始まったことに対してのもやもやを感じたんじゃないかなと思う。 作品に罪はない 素晴らしい作品は素晴らしい。 商売のやり方が下手で、嫌悪感を抱かれてしまったとしても、100日を過ごしたワニくんにたくさんの人が癒されていたことは間違いない。 素晴らしい作品だと思ったら、クリエイターに還元しましょう。","tags":"Social","url":"posts/2020/03/21/wani","loc":"posts/2020/03/21/wani"},{"title":"香川県の「ネット・ゲーム依存症対策条例」について","text":"ねとらぼ - 香川県の「ネット・ゲーム依存症対策条例」が可決 以前から気になっていたこの話題、昨日パブリックコメントに対する回答が提示されており、その内容も首を傾げるというか、なんだこれというような感じのものだったが、そのまま本日条例として可決、採択されたらしい。 ねとらぼ - 香川県「ゲーム規制条例」パブコメ回答まとめ 個人的に思うのは 民主主義的な進め方としてどうなのか？ 「良くないものは規制しよう」という短絡的な思考はどうなのか？ の2点。 民主主義な進め方としてどうなのか？ このタイトルはちょっと微妙かも。 要するに、地方自治体だろうが議会政治なわけで、少数の議員が暴走したとしても、建前上はそれを抑止する仕組みがあるはず。 今回の例でいえば、まるで科学的根拠のない思い込みが発端となっていながら、その理論がまるでまかり通っているように見受けられた。 自分の観測範囲では「ありえない」なことであっても、これが通ってしまう世の中の仕組みが怖い。 「良くないものは規制しよう」という思考 もう一つ。 昨今、多様性、ダイバーシティ、LGBTといった個々人のあり方、価値観についての議論は多いにあるところだと思う。 個人的には、多様性は大事なもので、個々の違いをお互いに認めあい、受け入れるないしは適度な距離を保って生活することが大事だと思う。 そして、「自分が良くないと思うものを規制しよう」というのはこの考え方に真っ向から反対するような思考だと感じる。 例えば、思想や信仰の自由は憲法で保証されている。 なので、誰がどういう宗教を信仰しようともそれは個々人の自由だと思う。 そして、個々人の行動の自由もまた然り。 もちろん、自由が保証されているからといって、何をしてもいいわけではない。 多様性や個人の価値観、思想や信仰の自由は保証されていても、それは他者を傷つけてよい理由にはならないし、法律を犯して良い理由にもならない。 これもまたエッジケースはあると思うけど。 なんでもかんでも「規制しろ」はこの「多様性」とか「個人の価値観」とかを真っ向から否定するものであり、 そういう姿勢はどうなんだろうなぁと思う。 じゃあどうすればいいんだっていうのは難しいけど、ゲームに限らず、アルコールやギャンブル、タバコなどと同じく、いかにコントロールするか、程よい距離感で付き合うかが大事だと思っている。 規制するのではなく、そういうものがある前提で、それによって社会性を損なわれないようにすることが大事だし、 そのためには、規制して取り上げるのではなく、そういうものがあることを教えて、リスクがあることを教えて、 その上でどう付き合うかが個々人で考える。 そういう姿勢が大事なんじゃないかなぁと思う。 ゲンダイ - 「秋葉原連続通り魔事件」そして犯人（加藤智大）の弟は自殺した これもまた、エッジケースではあるんだろうけども。","tags":"Social","url":"posts/2020/03/18/kagawa","loc":"posts/2020/03/18/kagawa"},{"title":"このサイトの技術スタックについて","text":"python pelican による静的ページ生成 github のリポジトリにコミット Netlify がコミットをフックしてビルド Netlify の Snippet Injection にて、GoogleAnalytics の js を注入 ビルドが無事通ったらそのまま Netlify で公開される ※画を書く","tags":"Tech","url":"posts/2020/03/17/about_this_blog","loc":"posts/2020/03/17/about_this_blog"},{"title":"最初の投稿","text":"新ブログサイトオープン 新しくブログサイトをオープン。この記事は最初の投稿。 技術ネタ、時事ネタ、その他ちょっとした思ったことを、なんとなくつらつら書くためのページ","tags":"no category","url":"posts/2020/03/16/FirstPost","loc":"posts/2020/03/16/FirstPost"},{"title":"このサイトの目的","text":"大きく以下だと思っている。 とにかく文章を書くことと、公開すること。 技術的挑戦 python を勉強中のため、pythonに触れる機会を増やしたい モダンな開発フローでの開発作業を知っておきたい 言語的挑戦 言語化の練習 実際に思ったことや言いたいことの言語化、アウトプットの挑戦 技術的挑戦 サーバインフラエンジニアとして新卒入社してから5年。 クラウド/オンプレのインフラ運用知見はそれなりにたまったと思ってるが、自社環境から抜け出せてなく、また縦割り組織の外の技術をほとんど知らないことに危機感を覚えている。 今後転職するであろうことも踏まえて、インフラのみならずな技術、スキルを身に着けておく、最低でも触れておきたく、またいざとなればポートフォリオとしても活用できそうな物を作っておきたかった。 言語的挑戦 エンジニア界隈では、勉強、とくに勉強した内容のアウトプットが大事と言われているし、実際それはそう思う。 アウトプットするだけなら、Qiitaや各種ブログサービスでも良い（し、実際にQiitaに過去何度か記事を書いているが）が、これらのサービスはアクセス数やランキングの可視化により、モチベーションが下がってしまう、投稿してもあまり見られない、意義がないように感じられてしまった（これはもちろん、自分が価値のある記事を作成できていないのが一番大きい）。 また、上記のようなサイトでは、投稿内容に制約があったり、自由な投稿ができないという部分もあるため、「自分でサイトを管理すること」と「アクセス数は最初から0であることを前提にしたら、気軽に文章を書けるようになるのではないかと考えて、自前で作成、管理することにした。 以上により、このブログには ジャンル、内容問わず 記事の質（内容、文章共に）を問わず 思ったことや書きたいことを自由に できるだけ高頻度、1日1回以上を目標に 記事、文章を量産していくことを目標とする。質より量。 もし質がいいなと思えるものが書けたら、技術的な内容なら Qiita へ、それ以外の一般的な内容なら note へ転載してみよう。 コメント欄もなければrssフィードもなし、インターネットに公開しておきながら誰にも見られない（とはいえ気になるので GoogleAnalytics はいれる、いや技術的なソレのためにね）前提でこのサイトを作成している。まぁTwitterとGithubへのリンクは載せてるけど。 何か問題があったときのため、連絡先メールアドレスは作っておこう。","tags":"no category","url":"posts/2020/03/15/aboutthisblog","loc":"posts/2020/03/15/aboutthisblog"},{"title":"投稿テスト用POST","text":"テスト用 test testtest test testtest testtesttest test test test test test ~test~ test コードブロックを使うサンプル python #!/usr/bin/env python3 def main (): print ( \"hello1\" ) if __name__ == '__main__' : main () shell script #!/bin/bash set -euC echo \"Hello!\" A = 1 print $(( A+2 )) exit 0 bash commands # bash commands $ cd /dir $ FILE = test $ touch \" ${ FILE } \" $ echo \"test\" >> \" ${ FILE } \" $ rm \" ${ FILE } \" $ exit → ログアウト text # cat test.txt text1 text2 text3 aaaa テーブル head1 head2 e1 e2 e3 e4 e5 リンク google HTML b i センターマン js ※ここに時計が表示されます。 ※以下、残骸 1 2 3 4 5 6 7 #!/usr/bin/env python3 # -*- coding: utf-8 -*- def main (): print ( \"hello1\" ) if __name__ == '__main__' : main () #!/usr/bin/env python3 # -*- coding: utf-8 -*- def main (): print ( \"hello2\" ) if __name__ == '__main__' : main () #!/usr/bin/env python3 # -*- coding: utf-8 -*- def main (): print ( \"hello3\" ) if __name__ == '__main__' : main () def main (): print ( \"hello4\" ) if __name__ == '__main__' : main () 1 2 3 4 5 #!/bin/bash set -euC echo \"heelo!\" exit 0 1 2 3 4 5 #!/bin/bash set -euC echo \"heelo!\" exit 0 set - euC echo \"hello!\" exit 0 set - euC echo \"hello!\" exit 0 # bash command # bash command # echo \"hello!\" # bash command # bash command # echo \"hello!\" # bash commands # bash command # echo \"hello!\" # A=1 # echo $((A+2)) # bash commands $ bash command $ echo hello $ A=1 $ echo $((A+2)) text text text text text text NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) # cat /etc/redhat-release NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) # cat /etc/redhat-release NAME=\"Amazon Linux\" VERSION=\"2\" ID=\"amzn\" ID_LIKE=\"centos rhel fedora\" VERSION_ID=\"2\" PRETTY_NAME=\"Amazon Linux 2\" ANSI_COLOR=\"0;33\" CPE_NAME=\"cpe:2.3:o:amazon:amazon_linux:2\" HOME_URL=\"https://amazonlinux.com/\" Amazon Linux release 2 (Karoo) .. code-block:: python print(\"Pelican is a static site generator.\") There are two ways to specify the identifier: print ( \"The triple-colon syntax will *not* show line numbers.\" ) To display line numbers, use a path-less shebang instead of colons: 1 print ( \"The path-less shebang syntax *will* show line numbers.\" ) test 記事の更新テスト test test","tags":"no category","url":"posts/1970/01/01/test","loc":"posts/1970/01/01/test"}]};